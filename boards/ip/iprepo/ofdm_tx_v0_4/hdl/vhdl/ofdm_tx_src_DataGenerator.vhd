-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\OFDM_Tx_HW\ofdm_tx_src_DataGenerator.vhd
-- Created: 2022-03-24 21:51:00
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ofdm_tx_src_DataGenerator
-- Source Path: OFDM_Tx_HW/OFDMTx/DataGenerator
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ofdm_tx_src_DataGenerator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_12_0                        :   IN    std_logic;
        enb_1_12_1                        :   IN    std_logic;
        enb                               :   IN    std_logic;
        modScheme                         :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        dataValid                         :   IN    std_logic;
        preambleValid                     :   IN    std_logic;
        dataReady                         :   IN    std_logic;
        pilotValid                        :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        preambValOut                      :   OUT   std_logic;
        dataValidOut                      :   OUT   std_logic
        );
END ofdm_tx_src_DataGenerator;


ARCHITECTURE rtl OF ofdm_tx_src_DataGenerator IS

  -- Component Declarations
  COMPONENT ofdm_tx_src_RF_Signal_Generator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_12_0                      :   IN    std_logic;
          Modulation                      :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Reset_1                         :   IN    std_logic;
          Enable                          :   IN    std_logic;
          m_axis_tdata_re                 :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          m_axis_tdata_im                 :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT ofdm_tx_src_PilotGen
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_12_0                      :   IN    std_logic;
          enb_1_12_1                      :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataValidIn                     :   IN    std_logic;
          pilotValidIn                    :   IN    std_logic;
          pilotOut_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          pilotOut_im                     :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT ofdm_tx_src_STSFreq
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_12_0                      :   IN    std_logic;
          enb_1_12_1                      :   IN    std_logic;
          enb                             :   IN    std_logic;
          preamVal                        :   IN    std_logic;
          stsFreq_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          stsFreq_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          stsVal                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ofdm_tx_src_LTSfreq
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_12_0                      :   IN    std_logic;
          enb_1_12_1                      :   IN    std_logic;
          enb                             :   IN    std_logic;
          preambVal                       :   IN    std_logic;
          ltsFreq                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          ltsVal                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ofdm_tx_src_Data_Multiplexer
    PORT( symbols_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          symbols_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataready                       :   IN    std_logic;
          pilots_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          pilots_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          pval                            :   IN    std_logic;
          sts_re                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          sts_im                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          stsval                          :   IN    std_logic;
          lts                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          ltsval                          :   IN    std_logic;
          data_re                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_im                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ofdm_tx_src_RF_Signal_Generator
    USE ENTITY work.ofdm_tx_src_RF_Signal_Generator(rtl);

  FOR ALL : ofdm_tx_src_PilotGen
    USE ENTITY work.ofdm_tx_src_PilotGen(rtl);

  FOR ALL : ofdm_tx_src_STSFreq
    USE ENTITY work.ofdm_tx_src_STSFreq(rtl);

  FOR ALL : ofdm_tx_src_LTSfreq
    USE ENTITY work.ofdm_tx_src_LTSfreq(rtl);

  FOR ALL : ofdm_tx_src_Data_Multiplexer
    USE ENTITY work.ofdm_tx_src_Data_Multiplexer(rtl);

  -- Signals
  SIGNAL modScheme_1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL modScheme_2                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay2_bypass_reg                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL modScheme_3                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL Constant_out1_1                  : std_logic;
  SIGNAL dataReady_1                      : std_logic;
  SIGNAL RF_Signal_Generator_out2_re      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL RF_Signal_Generator_out2_im      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL RF_Signal_Generator_out2_re_1    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL RF_Signal_Generator_out2_im_1    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dataValid_1                      : std_logic;
  SIGNAL pilotValid_1                     : std_logic;
  SIGNAL pilotValid_2                     : std_logic;
  SIGNAL PilotGen_out1_re                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL PilotGen_out1_im                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 9);  -- ufix1 [10]
  SIGNAL pilotValid_3                     : std_logic;
  SIGNAL preambleValid_1                  : std_logic;
  SIGNAL STSFreq_out1_re                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL STSFreq_out1_im                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL STSFreq_out2                     : std_logic;
  SIGNAL LTSfreq_out1                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL LTSfreq_out2                     : std_logic;
  SIGNAL data_re                          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL data_im                          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL data_re_signed                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_im_signed                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_re_1                        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_im_1                        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL preambleValid_2                  : std_logic;
  SIGNAL dataValid_2                      : std_logic;

BEGIN
  u_RF_Signal_Generator : ofdm_tx_src_RF_Signal_Generator
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_12_0 => enb_1_12_0,
              Modulation => std_logic_vector(modScheme_3),  -- uint32
              Reset_1 => Constant_out1_1,
              Enable => dataReady_1,
              m_axis_tdata_re => RF_Signal_Generator_out2_re,  -- sfix16_En14
              m_axis_tdata_im => RF_Signal_Generator_out2_im  -- sfix16_En14
              );

  u_PilotGen : ofdm_tx_src_PilotGen
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_12_0 => enb_1_12_0,
              enb_1_12_1 => enb_1_12_1,
              enb => enb,
              dataValidIn => dataValid_1,
              pilotValidIn => pilotValid_2,
              pilotOut_re => PilotGen_out1_re,  -- sfix16_En14
              pilotOut_im => PilotGen_out1_im  -- sfix16_En14
              );

  u_STSFreq : ofdm_tx_src_STSFreq
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_12_0 => enb_1_12_0,
              enb_1_12_1 => enb_1_12_1,
              enb => enb,
              preamVal => preambleValid_1,
              stsFreq_re => STSFreq_out1_re,  -- sfix16_En14
              stsFreq_im => STSFreq_out1_im,  -- sfix16_En14
              stsVal => STSFreq_out2
              );

  u_LTSfreq : ofdm_tx_src_LTSfreq
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_12_0 => enb_1_12_0,
              enb_1_12_1 => enb_1_12_1,
              enb => enb,
              preambVal => preambleValid_1,
              ltsFreq => LTSfreq_out1,  -- sfix16_En14
              ltsVal => LTSfreq_out2
              );

  u_Data_Multiplexer : ofdm_tx_src_Data_Multiplexer
    PORT MAP( symbols_re => RF_Signal_Generator_out2_re_1,  -- sfix16_En14
              symbols_im => RF_Signal_Generator_out2_im_1,  -- sfix16_En14
              dataready => dataReady_1,
              pilots_re => PilotGen_out1_re,  -- sfix16_En14
              pilots_im => PilotGen_out1_im,  -- sfix16_En14
              pval => pilotValid_3,
              sts_re => STSFreq_out1_re,  -- sfix16_En14
              sts_im => STSFreq_out1_im,  -- sfix16_En14
              stsval => STSFreq_out2,
              lts => LTSfreq_out1,  -- sfix16_En14
              ltsval => LTSfreq_out2,
              data_re => data_re,  -- sfix16_En14
              data_im => data_im  -- sfix16_En14
              );

  modScheme_1 <= unsigned(modScheme);

  in_0_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      modScheme_2 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        modScheme_2 <= modScheme_1;
      END IF;
    END IF;
  END PROCESS in_0_pipe_in_pipe_process;


  Delay2_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_bypass_reg <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_1 = '1' THEN
        Delay2_bypass_reg <= modScheme_2;
      END IF;
    END IF;
  END PROCESS Delay2_bypass_process;

  
  modScheme_3 <= modScheme_2 WHEN enb_1_12_1 = '1' ELSE
      Delay2_bypass_reg;

  Constant_out1 <= '0';

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Constant_out1_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Constant_out1_1 <= Constant_out1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  in_3_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataReady_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        dataReady_1 <= dataReady;
      END IF;
    END IF;
  END PROCESS in_3_pipe_in_pipe_process;


  RF_Signal_Generator_out2_re_1 <= std_logic_vector(signed(RF_Signal_Generator_out2_re));

  RF_Signal_Generator_out2_im_1 <= std_logic_vector(signed(RF_Signal_Generator_out2_im));

  in_1_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataValid_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        dataValid_1 <= dataValid;
      END IF;
    END IF;
  END PROCESS in_1_pipe_in_pipe_process;


  pilotValid_1 <= pilotValid;

  in_4_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      pilotValid_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        pilotValid_2 <= pilotValid_1;
      END IF;
    END IF;
  END PROCESS in_4_pipe_in_pipe_process;


  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch1_reg(0) <= pilotValid_2;
        delayMatch1_reg(1 TO 9) <= delayMatch1_reg(0 TO 8);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  pilotValid_3 <= delayMatch1_reg(9);

  in_2_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      preambleValid_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        preambleValid_1 <= preambleValid;
      END IF;
    END IF;
  END PROCESS in_2_pipe_in_pipe_process;


  data_re_signed <= signed(data_re);

  data_im_signed <= signed(data_im);

  out_0_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_re_1 <= to_signed(16#0000#, 16);
      data_im_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        data_re_1 <= data_re_signed;
        data_im_1 <= data_im_signed;
      END IF;
    END IF;
  END PROCESS out_0_pipe_in_pipe_process;


  dataOut_re <= std_logic_vector(data_re_1);

  dataOut_im <= std_logic_vector(data_im_1);

  out_1_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      preambleValid_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        preambleValid_2 <= preambleValid_1;
      END IF;
    END IF;
  END PROCESS out_1_pipe_in_pipe_process;


  out_2_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataValid_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        dataValid_2 <= dataValid_1;
      END IF;
    END IF;
  END PROCESS out_2_pipe_in_pipe_process;


  preambValOut <= preambleValid_2;

  dataValidOut <= dataValid_2;

END rtl;

