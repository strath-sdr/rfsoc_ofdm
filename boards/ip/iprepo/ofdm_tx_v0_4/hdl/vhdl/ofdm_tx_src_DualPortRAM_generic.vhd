-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\OFDM_Tx_HW\ofdm_tx_src_DualPortRAM_generic.vhd
-- Created: 2022-03-24 21:51:00
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ofdm_tx_src_DualPortRAM_generic
-- Source Path: OFDM_Tx_HW/OFDMTx/CPAdd/DataExtend/DualPortRAM_generic
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ofdm_tx_src_DualPortRAM_generic IS
  GENERIC( AddrWidth                      : integer := 1;
           DataWidth                      : integer := 1
           );
  PORT( clk                               :   IN    std_logic;
        enb_1_12_0                        :   IN    std_logic;
        wr_din_re                         :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
        wr_din_im                         :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
        wr_addr                           :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
        wr_en                             :   IN    std_logic;  -- ufix1
        rd_addr                           :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
        wr_dout_re                        :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
        wr_dout_im                        :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
        rd_dout_re                        :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
        rd_dout_im                        :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
        );
END ofdm_tx_src_DualPortRAM_generic;


ARCHITECTURE rtl OF ofdm_tx_src_DualPortRAM_generic IS

  -- Local Type Definitions
  TYPE ram_type IS ARRAY (2**AddrWidth - 1 DOWNTO 0) of std_logic_vector(DataWidth*2 - 1 DOWNTO 0);

  -- Signals
  SIGNAL ram                              : ram_type := (OTHERS => (OTHERS => '0'));
  SIGNAL dout_b                           : std_logic_vector(DataWidth*2 - 1 DOWNTO 0) := (OTHERS => '0');
  SIGNAL dout_a                           : std_logic_vector(DataWidth*2 - 1 DOWNTO 0) := (OTHERS => '0');
  SIGNAL wr_addr_unsigned                 : unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width
  SIGNAL rd_addr_unsigned                 : unsigned(AddrWidth - 1 DOWNTO 0);  -- generic width

BEGIN
  wr_addr_unsigned <= unsigned(wr_addr);

  rd_addr_unsigned <= unsigned(rd_addr);

  DualPortRAM_generic_process: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        IF wr_en = '1' THEN
          ram(to_integer(wr_addr_unsigned)) <= wr_din_re & wr_din_im;
          dout_a <= wr_din_re & wr_din_im;
        ELSE
          dout_a <= ram(to_integer(wr_addr_unsigned));
        END IF;
        dout_b <= ram(to_integer(rd_addr_unsigned));
      END IF;
    END IF;
  END PROCESS DualPortRAM_generic_process;

  rd_dout_re <= dout_b(DataWidth*2-1 DOWNTO DataWidth);
  rd_dout_im <= dout_b(DataWidth-1 DOWNTO 0);
  wr_dout_re <= dout_a(DataWidth*2-1 DOWNTO DataWidth);
  wr_dout_im <= dout_a(DataWidth-1 DOWNTO 0);

END rtl;

