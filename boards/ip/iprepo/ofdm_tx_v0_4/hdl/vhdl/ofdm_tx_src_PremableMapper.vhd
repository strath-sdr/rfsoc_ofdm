-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\OFDM_Tx_HW\ofdm_tx_src_PremableMapper.vhd
-- Created: 2022-03-24 21:51:00
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ofdm_tx_src_PremableMapper
-- Source Path: OFDM_Tx_HW/OFDMTx/SCMapper/PremableMapper
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ofdm_tx_src_OFDMTx_pkg.ALL;

ENTITY ofdm_tx_src_PremableMapper IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_12_0                        :   IN    std_logic;
        enb_1_12_1                        :   IN    std_logic;
        enb                               :   IN    std_logic;
        data_re                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_im                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        preambVal                         :   IN    std_logic;
        preambleShiftOut_re               :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        preambleShiftOut_im               :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        preambValOut                      :   OUT   std_logic
        );
END ofdm_tx_src_PremableMapper;


ARCHITECTURE rtl OF ofdm_tx_src_PremableMapper IS

  -- Component Declarations
  COMPONENT ofdm_tx_src_READ_CTRL_block1
    PORT( In1                             :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          In2                             :   IN    std_logic;
          Out1                            :   OUT   std_logic_vector(8 DOWNTO 0)  -- ufix9
          );
  END COMPONENT;

  COMPONENT ofdm_tx_src_DualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb_1_12_0                      :   IN    std_logic;
          wr_din_re                       :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_din_im                       :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_dout_re                      :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_dout_im                      :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          rd_dout_re                      :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          rd_dout_im                      :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ofdm_tx_src_READ_CTRL_block1
    USE ENTITY work.ofdm_tx_src_READ_CTRL_block1(rtl);

  FOR ALL : ofdm_tx_src_DualPortRAM_generic
    USE ENTITY work.ofdm_tx_src_DualPortRAM_generic(rtl);

  -- Constants
  CONSTANT readaddr_data                  : vector_of_unsigned9(0 TO 319) := 
    (to_unsigned(16#000#, 9), to_unsigned(16#001#, 9), to_unsigned(16#002#, 9), to_unsigned(16#003#, 9),
     to_unsigned(16#004#, 9), to_unsigned(16#005#, 9), to_unsigned(16#006#, 9), to_unsigned(16#007#, 9),
     to_unsigned(16#008#, 9), to_unsigned(16#009#, 9), to_unsigned(16#00A#, 9), to_unsigned(16#00B#, 9),
     to_unsigned(16#00C#, 9), to_unsigned(16#00D#, 9), to_unsigned(16#00E#, 9), to_unsigned(16#00F#, 9),
     to_unsigned(16#010#, 9), to_unsigned(16#011#, 9), to_unsigned(16#012#, 9), to_unsigned(16#013#, 9),
     to_unsigned(16#014#, 9), to_unsigned(16#015#, 9), to_unsigned(16#016#, 9), to_unsigned(16#017#, 9),
     to_unsigned(16#018#, 9), to_unsigned(16#019#, 9), to_unsigned(16#01A#, 9), to_unsigned(16#01B#, 9),
     to_unsigned(16#01C#, 9), to_unsigned(16#01D#, 9), to_unsigned(16#01E#, 9), to_unsigned(16#01F#, 9),
     to_unsigned(16#020#, 9), to_unsigned(16#021#, 9), to_unsigned(16#022#, 9), to_unsigned(16#023#, 9),
     to_unsigned(16#024#, 9), to_unsigned(16#025#, 9), to_unsigned(16#026#, 9), to_unsigned(16#027#, 9),
     to_unsigned(16#028#, 9), to_unsigned(16#029#, 9), to_unsigned(16#02A#, 9), to_unsigned(16#02B#, 9),
     to_unsigned(16#02C#, 9), to_unsigned(16#02D#, 9), to_unsigned(16#02E#, 9), to_unsigned(16#02F#, 9),
     to_unsigned(16#030#, 9), to_unsigned(16#031#, 9), to_unsigned(16#032#, 9), to_unsigned(16#033#, 9),
     to_unsigned(16#034#, 9), to_unsigned(16#035#, 9), to_unsigned(16#036#, 9), to_unsigned(16#037#, 9),
     to_unsigned(16#038#, 9), to_unsigned(16#039#, 9), to_unsigned(16#03A#, 9), to_unsigned(16#03B#, 9),
     to_unsigned(16#03C#, 9), to_unsigned(16#03D#, 9), to_unsigned(16#03E#, 9), to_unsigned(16#03F#, 9),
     to_unsigned(16#040#, 9), to_unsigned(16#041#, 9), to_unsigned(16#042#, 9), to_unsigned(16#043#, 9),
     to_unsigned(16#044#, 9), to_unsigned(16#045#, 9), to_unsigned(16#046#, 9), to_unsigned(16#047#, 9),
     to_unsigned(16#048#, 9), to_unsigned(16#049#, 9), to_unsigned(16#04A#, 9), to_unsigned(16#04B#, 9),
     to_unsigned(16#04C#, 9), to_unsigned(16#04D#, 9), to_unsigned(16#04E#, 9), to_unsigned(16#04F#, 9),
     to_unsigned(16#050#, 9), to_unsigned(16#051#, 9), to_unsigned(16#052#, 9), to_unsigned(16#053#, 9),
     to_unsigned(16#054#, 9), to_unsigned(16#055#, 9), to_unsigned(16#056#, 9), to_unsigned(16#057#, 9),
     to_unsigned(16#058#, 9), to_unsigned(16#059#, 9), to_unsigned(16#05A#, 9), to_unsigned(16#05B#, 9),
     to_unsigned(16#05C#, 9), to_unsigned(16#05D#, 9), to_unsigned(16#05E#, 9), to_unsigned(16#05F#, 9),
     to_unsigned(16#080#, 9), to_unsigned(16#081#, 9), to_unsigned(16#082#, 9), to_unsigned(16#083#, 9),
     to_unsigned(16#084#, 9), to_unsigned(16#085#, 9), to_unsigned(16#086#, 9), to_unsigned(16#087#, 9),
     to_unsigned(16#088#, 9), to_unsigned(16#089#, 9), to_unsigned(16#08A#, 9), to_unsigned(16#08B#, 9),
     to_unsigned(16#08C#, 9), to_unsigned(16#08D#, 9), to_unsigned(16#08E#, 9), to_unsigned(16#08F#, 9),
     to_unsigned(16#090#, 9), to_unsigned(16#091#, 9), to_unsigned(16#092#, 9), to_unsigned(16#093#, 9),
     to_unsigned(16#094#, 9), to_unsigned(16#095#, 9), to_unsigned(16#096#, 9), to_unsigned(16#097#, 9),
     to_unsigned(16#098#, 9), to_unsigned(16#099#, 9), to_unsigned(16#09A#, 9), to_unsigned(16#09B#, 9),
     to_unsigned(16#09C#, 9), to_unsigned(16#09D#, 9), to_unsigned(16#09E#, 9), to_unsigned(16#09F#, 9),
     to_unsigned(16#060#, 9), to_unsigned(16#061#, 9), to_unsigned(16#062#, 9), to_unsigned(16#063#, 9),
     to_unsigned(16#064#, 9), to_unsigned(16#065#, 9), to_unsigned(16#066#, 9), to_unsigned(16#067#, 9),
     to_unsigned(16#068#, 9), to_unsigned(16#069#, 9), to_unsigned(16#06A#, 9), to_unsigned(16#06B#, 9),
     to_unsigned(16#06C#, 9), to_unsigned(16#06D#, 9), to_unsigned(16#06E#, 9), to_unsigned(16#06F#, 9),
     to_unsigned(16#070#, 9), to_unsigned(16#071#, 9), to_unsigned(16#072#, 9), to_unsigned(16#073#, 9),
     to_unsigned(16#074#, 9), to_unsigned(16#075#, 9), to_unsigned(16#076#, 9), to_unsigned(16#077#, 9),
     to_unsigned(16#078#, 9), to_unsigned(16#079#, 9), to_unsigned(16#07A#, 9), to_unsigned(16#07B#, 9),
     to_unsigned(16#07C#, 9), to_unsigned(16#07D#, 9), to_unsigned(16#07E#, 9), to_unsigned(16#07F#, 9),
     to_unsigned(16#0A0#, 9), to_unsigned(16#0A1#, 9), to_unsigned(16#0A2#, 9), to_unsigned(16#0A3#, 9),
     to_unsigned(16#0A4#, 9), to_unsigned(16#0A5#, 9), to_unsigned(16#0A6#, 9), to_unsigned(16#0A7#, 9),
     to_unsigned(16#0A8#, 9), to_unsigned(16#0A9#, 9), to_unsigned(16#0AA#, 9), to_unsigned(16#0AB#, 9),
     to_unsigned(16#0AC#, 9), to_unsigned(16#0AD#, 9), to_unsigned(16#0AE#, 9), to_unsigned(16#0AF#, 9),
     to_unsigned(16#0B0#, 9), to_unsigned(16#0B1#, 9), to_unsigned(16#0B2#, 9), to_unsigned(16#0B3#, 9),
     to_unsigned(16#0B4#, 9), to_unsigned(16#0B5#, 9), to_unsigned(16#0B6#, 9), to_unsigned(16#0B7#, 9),
     to_unsigned(16#0B8#, 9), to_unsigned(16#0B9#, 9), to_unsigned(16#0BA#, 9), to_unsigned(16#0BB#, 9),
     to_unsigned(16#0BC#, 9), to_unsigned(16#0BD#, 9), to_unsigned(16#0BE#, 9), to_unsigned(16#0BF#, 9),
     to_unsigned(16#0C0#, 9), to_unsigned(16#0C1#, 9), to_unsigned(16#0C2#, 9), to_unsigned(16#0C3#, 9),
     to_unsigned(16#0C4#, 9), to_unsigned(16#0C5#, 9), to_unsigned(16#0C6#, 9), to_unsigned(16#0C7#, 9),
     to_unsigned(16#0C8#, 9), to_unsigned(16#0C9#, 9), to_unsigned(16#0CA#, 9), to_unsigned(16#0CB#, 9),
     to_unsigned(16#0CC#, 9), to_unsigned(16#0CD#, 9), to_unsigned(16#0CE#, 9), to_unsigned(16#0CF#, 9),
     to_unsigned(16#0D0#, 9), to_unsigned(16#0D1#, 9), to_unsigned(16#0D2#, 9), to_unsigned(16#0D3#, 9),
     to_unsigned(16#0D4#, 9), to_unsigned(16#0D5#, 9), to_unsigned(16#0D6#, 9), to_unsigned(16#0D7#, 9),
     to_unsigned(16#0D8#, 9), to_unsigned(16#0D9#, 9), to_unsigned(16#0DA#, 9), to_unsigned(16#0DB#, 9),
     to_unsigned(16#0DC#, 9), to_unsigned(16#0DD#, 9), to_unsigned(16#0DE#, 9), to_unsigned(16#0DF#, 9),
     to_unsigned(16#0E0#, 9), to_unsigned(16#0E1#, 9), to_unsigned(16#0E2#, 9), to_unsigned(16#0E3#, 9),
     to_unsigned(16#0E4#, 9), to_unsigned(16#0E5#, 9), to_unsigned(16#0E6#, 9), to_unsigned(16#0E7#, 9),
     to_unsigned(16#0E8#, 9), to_unsigned(16#0E9#, 9), to_unsigned(16#0EA#, 9), to_unsigned(16#0EB#, 9),
     to_unsigned(16#0EC#, 9), to_unsigned(16#0ED#, 9), to_unsigned(16#0EE#, 9), to_unsigned(16#0EF#, 9),
     to_unsigned(16#0F0#, 9), to_unsigned(16#0F1#, 9), to_unsigned(16#0F2#, 9), to_unsigned(16#0F3#, 9),
     to_unsigned(16#0F4#, 9), to_unsigned(16#0F5#, 9), to_unsigned(16#0F6#, 9), to_unsigned(16#0F7#, 9),
     to_unsigned(16#0F8#, 9), to_unsigned(16#0F9#, 9), to_unsigned(16#0FA#, 9), to_unsigned(16#0FB#, 9),
     to_unsigned(16#0FC#, 9), to_unsigned(16#0FD#, 9), to_unsigned(16#0FE#, 9), to_unsigned(16#0FF#, 9),
     to_unsigned(16#120#, 9), to_unsigned(16#121#, 9), to_unsigned(16#122#, 9), to_unsigned(16#123#, 9),
     to_unsigned(16#124#, 9), to_unsigned(16#125#, 9), to_unsigned(16#126#, 9), to_unsigned(16#127#, 9),
     to_unsigned(16#128#, 9), to_unsigned(16#129#, 9), to_unsigned(16#12A#, 9), to_unsigned(16#12B#, 9),
     to_unsigned(16#12C#, 9), to_unsigned(16#12D#, 9), to_unsigned(16#12E#, 9), to_unsigned(16#12F#, 9),
     to_unsigned(16#130#, 9), to_unsigned(16#131#, 9), to_unsigned(16#132#, 9), to_unsigned(16#133#, 9),
     to_unsigned(16#134#, 9), to_unsigned(16#135#, 9), to_unsigned(16#136#, 9), to_unsigned(16#137#, 9),
     to_unsigned(16#138#, 9), to_unsigned(16#139#, 9), to_unsigned(16#13A#, 9), to_unsigned(16#13B#, 9),
     to_unsigned(16#13C#, 9), to_unsigned(16#13D#, 9), to_unsigned(16#13E#, 9), to_unsigned(16#13F#, 9),
     to_unsigned(16#100#, 9), to_unsigned(16#101#, 9), to_unsigned(16#102#, 9), to_unsigned(16#103#, 9),
     to_unsigned(16#104#, 9), to_unsigned(16#105#, 9), to_unsigned(16#106#, 9), to_unsigned(16#107#, 9),
     to_unsigned(16#108#, 9), to_unsigned(16#109#, 9), to_unsigned(16#10A#, 9), to_unsigned(16#10B#, 9),
     to_unsigned(16#10C#, 9), to_unsigned(16#10D#, 9), to_unsigned(16#10E#, 9), to_unsigned(16#10F#, 9),
     to_unsigned(16#110#, 9), to_unsigned(16#111#, 9), to_unsigned(16#112#, 9), to_unsigned(16#113#, 9),
     to_unsigned(16#114#, 9), to_unsigned(16#115#, 9), to_unsigned(16#116#, 9), to_unsigned(16#117#, 9),
     to_unsigned(16#118#, 9), to_unsigned(16#119#, 9), to_unsigned(16#11A#, 9), to_unsigned(16#11B#, 9),
     to_unsigned(16#11C#, 9), to_unsigned(16#11D#, 9), to_unsigned(16#11E#, 9), to_unsigned(16#11F#, 9));  -- ufix9 [320]

  -- Signals
  SIGNAL data_re_signed                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_im_signed                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayMatch1_reg_re               : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL delayMatch1_reg_im               : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL data_re_1                        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_im_1                        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL HDL_Counter3_out1                : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL HDL_Counter3_out1_1              : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL preambVal_1                      : std_logic;
  SIGNAL reduced_reg                      : std_logic_vector(0 TO 158);  -- ufix1 [159]
  SIGNAL preambVal_2                      : std_logic;
  SIGNAL HDL_Counter2_out1                : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL HDL_Counter2_out1_1              : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL readaddr_k                       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL readaddr_out1                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL readaddr_out1_1                  : unsigned(8 DOWNTO 0) := to_unsigned(16#000#, 9);  -- ufix9
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Delay_out1_1                     : std_logic;
  SIGNAL READ_CTRL_out1                   : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL READ_CTRL_out1_unsigned          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Dual_Port_RAM1_bypass_reg        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL READ_CTRL_out1_1                 : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Dual_Port_RAM_out1_re            : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Dual_Port_RAM_out1_im            : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Dual_Port_RAM_out2_re            : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Dual_Port_RAM_out2_im            : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Delay12_out1                     : std_logic;

BEGIN
  u_READ_CTRL : ofdm_tx_src_READ_CTRL_block1
    PORT MAP( In1 => std_logic_vector(readaddr_out1_1),  -- ufix9
              In2 => Delay_out1_1,
              Out1 => READ_CTRL_out1  -- ufix9
              );

  u_Dual_Port_RAM : ofdm_tx_src_DualPortRAM_generic
    GENERIC MAP( AddrWidth => 9,
                 DataWidth => 16
                 )
    PORT MAP( clk => clk,
              enb_1_12_0 => enb_1_12_0,
              wr_din_re => std_logic_vector(data_re_1),
              wr_din_im => std_logic_vector(data_im_1),
              wr_addr => std_logic_vector(HDL_Counter3_out1_1),
              wr_en => preambVal_1,
              rd_addr => std_logic_vector(READ_CTRL_out1_1),
              wr_dout_re => Dual_Port_RAM_out1_re,
              wr_dout_im => Dual_Port_RAM_out1_im,
              rd_dout_re => Dual_Port_RAM_out2_re,
              rd_dout_im => Dual_Port_RAM_out2_im
              );

  data_re_signed <= signed(data_re);

  data_im_signed <= signed(data_im);

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      delayMatch1_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        delayMatch1_reg_im(0) <= data_im_signed;
        delayMatch1_reg_im(1) <= delayMatch1_reg_im(0);
        delayMatch1_reg_re(0) <= data_re_signed;
        delayMatch1_reg_re(1) <= delayMatch1_reg_re(0);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  data_re_1 <= delayMatch1_reg_re(1);
  data_im_1 <= delayMatch1_reg_im(1);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 319
  HDL_Counter3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter3_out1 <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        IF preambVal = '1' THEN 
          IF HDL_Counter3_out1 >= to_unsigned(16#13F#, 9) THEN 
            HDL_Counter3_out1 <= to_unsigned(16#000#, 9);
          ELSE 
            HDL_Counter3_out1 <= HDL_Counter3_out1 + to_unsigned(16#001#, 9);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter3_process;


  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter3_out1_1 <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        HDL_Counter3_out1_1 <= HDL_Counter3_out1;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      preambVal_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        preambVal_1 <= preambVal;
      END IF;
    END IF;
  END PROCESS reduced_process;


  reduced_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        reduced_reg(0) <= preambVal_1;
        reduced_reg(1 TO 158) <= reduced_reg(0 TO 157);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  preambVal_2 <= reduced_reg(158);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 319
  HDL_Counter2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter2_out1 <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        IF preambVal_2 = '1' THEN 
          IF HDL_Counter2_out1 >= to_unsigned(16#13F#, 9) THEN 
            HDL_Counter2_out1 <= to_unsigned(16#000#, 9);
          ELSE 
            HDL_Counter2_out1 <= HDL_Counter2_out1 + to_unsigned(16#001#, 9);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter2_process;


  HDL_Counter2_out1_1 <= HDL_Counter2_out1;

  
  readaddr_k <= to_unsigned(16#000#, 9) WHEN HDL_Counter2_out1_1 = to_unsigned(16#000#, 9) ELSE
      to_unsigned(16#13F#, 9) WHEN HDL_Counter2_out1_1 >= to_unsigned(16#13F#, 9) ELSE
      HDL_Counter2_out1_1;
  readaddr_out1 <= readaddr_data(to_integer(readaddr_k));

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        readaddr_out1_1 <= readaddr_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Delay_out1 <= preambVal_2;

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1_1 <= Delay_out1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  READ_CTRL_out1_unsigned <= unsigned(READ_CTRL_out1);

  Dual_Port_RAM1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Dual_Port_RAM1_bypass_reg <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_1 = '1' THEN
        Dual_Port_RAM1_bypass_reg <= READ_CTRL_out1_unsigned;
      END IF;
    END IF;
  END PROCESS Dual_Port_RAM1_bypass_process;

  
  READ_CTRL_out1_1 <= READ_CTRL_out1_unsigned WHEN enb_1_12_1 = '1' ELSE
      Dual_Port_RAM1_bypass_reg;

  Delay12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay12_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Delay12_out1 <= preambVal_2;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  preambleShiftOut_re <= Dual_Port_RAM_out2_re;

  preambleShiftOut_im <= Dual_Port_RAM_out2_im;

  preambValOut <= Delay12_out1;

END rtl;

