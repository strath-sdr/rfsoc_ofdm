-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\OFDM_Tx_HW\ofdm_tx_src_QAM1024_Generator.vhd
-- Created: 2022-03-24 21:51:00
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ofdm_tx_src_QAM1024_Generator
-- Source Path: OFDM_Tx_HW/OFDMTx/DataGenerator/RF Signal Generator/Variable Modulator/QAM1024 Generator
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ofdm_tx_src_QAM1024_Generator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_12_0                        :   IN    std_logic;
        Data                              :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
        Reset_1                           :   IN    std_logic;
        Enable                            :   IN    std_logic;
        I_symbols                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        Q_symbols                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
        );
END ofdm_tx_src_QAM1024_Generator;


ARCHITECTURE rtl OF ofdm_tx_src_QAM1024_Generator IS

  -- Component Declarations
  COMPONENT ofdm_tx_src_complement_re1
    PORT( d_in                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          d_out                           :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT ofdm_tx_src_complement_im1
    PORT( d_in                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          d_out                           :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ofdm_tx_src_complement_re1
    USE ENTITY work.ofdm_tx_src_complement_re1(rtl);

  FOR ALL : ofdm_tx_src_complement_im1
    USE ENTITY work.ofdm_tx_src_complement_im1(rtl);

  -- Signals
  SIGNAL reduced_reg                      : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Reset_2                          : std_logic;
  SIGNAL Data_unsigned                    : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Bit_Slice7_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Constant9_out1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant10_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant11_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant12_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant13_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant14_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant15_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant16_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant24_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant17_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant18_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant19_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant20_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant21_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant22_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant23_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiport_Switch4_out1           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL complement_re1_out1              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL complement_re1_out1_signed       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiport_Switch7_out1           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_iv                        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_delOut                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_ectrl                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_toDelay                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_bypassIn                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_last_value                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Bit_Slice8_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Multiport_Switch5_out1           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL complement_im1_out1              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL complement_im1_out1_signed       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiport_Switch6_out1           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_iv                        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_delOut                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_ectrl                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_toDelay                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_bypassIn                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_last_value                : signed(15 DOWNTO 0);  -- sfix16_En14

BEGIN
  u_complement_re1 : ofdm_tx_src_complement_re1
    PORT MAP( d_in => std_logic_vector(Multiport_Switch4_out1),  -- sfix16_En14
              d_out => complement_re1_out1  -- sfix16_En14
              );

  u_complement_im1 : ofdm_tx_src_complement_im1
    PORT MAP( d_in => std_logic_vector(Multiport_Switch5_out1),  -- sfix16_En14
              d_out => complement_im1_out1  -- sfix16_En14
              );

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        reduced_reg(0) <= Reset_1;
        reduced_reg(1) <= reduced_reg(0);
      END IF;
    END IF;
  END PROCESS reduced_process;

  Reset_2 <= reduced_reg(1);

  Data_unsigned <= unsigned(Data);

  Bit_Slice7_out1 <= Data_unsigned(8);

  Bit_Slice5_out1 <= Data_unsigned(3 DOWNTO 0);

  Constant9_out1 <= to_signed(16#4000#, 16);

  Constant10_out1 <= to_signed(16#3BDF#, 16);

  Constant11_out1 <= to_signed(16#37BE#, 16);

  Constant12_out1 <= to_signed(16#339D#, 16);

  Constant13_out1 <= to_signed(16#2F7C#, 16);

  Constant14_out1 <= to_signed(16#2B5B#, 16);

  Constant15_out1 <= to_signed(16#273A#, 16);

  Constant16_out1 <= to_signed(16#2319#, 16);

  Constant24_out1 <= to_signed(16#1EF8#, 16);

  Constant17_out1 <= to_signed(16#1AD7#, 16);

  Constant18_out1 <= to_signed(16#16B6#, 16);

  Constant19_out1 <= to_signed(16#1295#, 16);

  Constant20_out1 <= to_signed(16#0E74#, 16);

  Constant21_out1 <= to_signed(16#0A53#, 16);

  Constant22_out1 <= to_signed(16#0632#, 16);

  Constant23_out1 <= to_signed(16#0211#, 16);

  
  Multiport_Switch4_out1 <= Constant9_out1 WHEN Bit_Slice5_out1 = to_unsigned(16#0#, 4) ELSE
      Constant10_out1 WHEN Bit_Slice5_out1 = to_unsigned(16#1#, 4) ELSE
      Constant11_out1 WHEN Bit_Slice5_out1 = to_unsigned(16#2#, 4) ELSE
      Constant12_out1 WHEN Bit_Slice5_out1 = to_unsigned(16#3#, 4) ELSE
      Constant13_out1 WHEN Bit_Slice5_out1 = to_unsigned(16#4#, 4) ELSE
      Constant14_out1 WHEN Bit_Slice5_out1 = to_unsigned(16#5#, 4) ELSE
      Constant15_out1 WHEN Bit_Slice5_out1 = to_unsigned(16#6#, 4) ELSE
      Constant16_out1 WHEN Bit_Slice5_out1 = to_unsigned(16#7#, 4) ELSE
      Constant24_out1 WHEN Bit_Slice5_out1 = to_unsigned(16#8#, 4) ELSE
      Constant17_out1 WHEN Bit_Slice5_out1 = to_unsigned(16#9#, 4) ELSE
      Constant18_out1 WHEN Bit_Slice5_out1 = to_unsigned(16#A#, 4) ELSE
      Constant19_out1 WHEN Bit_Slice5_out1 = to_unsigned(16#B#, 4) ELSE
      Constant20_out1 WHEN Bit_Slice5_out1 = to_unsigned(16#C#, 4) ELSE
      Constant21_out1 WHEN Bit_Slice5_out1 = to_unsigned(16#D#, 4) ELSE
      Constant22_out1 WHEN Bit_Slice5_out1 = to_unsigned(16#E#, 4) ELSE
      Constant23_out1;

  complement_re1_out1_signed <= signed(complement_re1_out1);

  
  Multiport_Switch7_out1 <= Multiport_Switch4_out1 WHEN Bit_Slice7_out1 = '0' ELSE
      complement_re1_out1_signed;

  Delay3_iv <= to_signed(16#0000#, 16);

  
  Delay3_ectrl <= Delay3_delOut WHEN Enable = '0' ELSE
      Multiport_Switch7_out1;

  
  Delay3_toDelay <= Delay3_ectrl WHEN Reset_2 = '0' ELSE
      Delay3_iv;

  Delay3_lowered_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_delOut <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Delay3_delOut <= Delay3_toDelay;
      END IF;
    END IF;
  END PROCESS Delay3_lowered_process;


  
  Delay3_bypassIn <= Delay3_delOut WHEN Reset_2 = '0' ELSE
      Delay3_iv;

  Delay3_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_last_value <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Delay3_last_value <= Delay3_out1;
      END IF;
    END IF;
  END PROCESS Delay3_bypass_process;


  
  Delay3_out1 <= Delay3_last_value WHEN Enable = '0' ELSE
      Delay3_bypassIn;

  I_symbols <= std_logic_vector(Delay3_out1);

  Bit_Slice8_out1 <= Data_unsigned(9);

  Bit_Slice6_out1 <= Data_unsigned(7 DOWNTO 4);

  
  Multiport_Switch5_out1 <= Constant9_out1 WHEN Bit_Slice6_out1 = to_unsigned(16#0#, 4) ELSE
      Constant10_out1 WHEN Bit_Slice6_out1 = to_unsigned(16#1#, 4) ELSE
      Constant11_out1 WHEN Bit_Slice6_out1 = to_unsigned(16#2#, 4) ELSE
      Constant12_out1 WHEN Bit_Slice6_out1 = to_unsigned(16#3#, 4) ELSE
      Constant13_out1 WHEN Bit_Slice6_out1 = to_unsigned(16#4#, 4) ELSE
      Constant14_out1 WHEN Bit_Slice6_out1 = to_unsigned(16#5#, 4) ELSE
      Constant15_out1 WHEN Bit_Slice6_out1 = to_unsigned(16#6#, 4) ELSE
      Constant16_out1 WHEN Bit_Slice6_out1 = to_unsigned(16#7#, 4) ELSE
      Constant24_out1 WHEN Bit_Slice6_out1 = to_unsigned(16#8#, 4) ELSE
      Constant17_out1 WHEN Bit_Slice6_out1 = to_unsigned(16#9#, 4) ELSE
      Constant18_out1 WHEN Bit_Slice6_out1 = to_unsigned(16#A#, 4) ELSE
      Constant19_out1 WHEN Bit_Slice6_out1 = to_unsigned(16#B#, 4) ELSE
      Constant20_out1 WHEN Bit_Slice6_out1 = to_unsigned(16#C#, 4) ELSE
      Constant21_out1 WHEN Bit_Slice6_out1 = to_unsigned(16#D#, 4) ELSE
      Constant22_out1 WHEN Bit_Slice6_out1 = to_unsigned(16#E#, 4) ELSE
      Constant23_out1;

  complement_im1_out1_signed <= signed(complement_im1_out1);

  
  Multiport_Switch6_out1 <= Multiport_Switch5_out1 WHEN Bit_Slice8_out1 = '0' ELSE
      complement_im1_out1_signed;

  Delay4_iv <= to_signed(16#0000#, 16);

  
  Delay4_ectrl <= Delay4_delOut WHEN Enable = '0' ELSE
      Multiport_Switch6_out1;

  
  Delay4_toDelay <= Delay4_ectrl WHEN Reset_2 = '0' ELSE
      Delay4_iv;

  Delay4_lowered_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_delOut <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Delay4_delOut <= Delay4_toDelay;
      END IF;
    END IF;
  END PROCESS Delay4_lowered_process;


  
  Delay4_bypassIn <= Delay4_delOut WHEN Reset_2 = '0' ELSE
      Delay4_iv;

  Delay4_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_last_value <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Delay4_last_value <= Delay4_out1;
      END IF;
    END IF;
  END PROCESS Delay4_bypass_process;


  
  Delay4_out1 <= Delay4_last_value WHEN Enable = '0' ELSE
      Delay4_bypassIn;

  Q_symbols <= std_logic_vector(Delay4_out1);

END rtl;

