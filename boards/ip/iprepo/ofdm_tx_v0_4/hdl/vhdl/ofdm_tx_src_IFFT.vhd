-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\OFDM_Tx_HW\ofdm_tx_src_IFFT.vhd
-- Created: 2022-03-24 21:51:00
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ofdm_tx_src_IFFT
-- Source Path: OFDM_Tx_HW/OFDMTx/IFFT
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ofdm_tx_src_IFFT IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_12_0                        :   IN    std_logic;
        enb_1_12_1                        :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        preambleValidIn                   :   IN    std_logic;
        dataValidIn                       :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        preambValidOut                    :   OUT   std_logic;
        dataValidOut                      :   OUT   std_logic
        );
END ofdm_tx_src_IFFT;


ARCHITECTURE rtl OF ofdm_tx_src_IFFT IS

  -- Component Declarations
  COMPONENT ofdm_tx_src_IFFTValid
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_12_0                      :   IN    std_logic;
          preambleValid                   :   IN    std_logic;
          dataValid                       :   IN    std_logic;
          ifftValid                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ofdm_tx_src_IFFT_HDL_Optimized
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_12_0                      :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ofdm_tx_src_IFFTValid
    USE ENTITY work.ofdm_tx_src_IFFTValid(rtl);

  FOR ALL : ofdm_tx_src_IFFT_HDL_Optimized
    USE ENTITY work.ofdm_tx_src_IFFT_HDL_Optimized(rtl);

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_re_1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_im_1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL IFFT_HDL_Optimized1_bypass_reg_re : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL IFFT_HDL_Optimized1_bypass_reg_im : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_re_2                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_im_2                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL preambleValidIn_1                : std_logic;
  SIGNAL NOT_bypass_reg                   : std_logic;  -- ufix1
  SIGNAL preambleValidIn_2                : std_logic;
  SIGNAL dataValidIn_1                    : std_logic;
  SIGNAL Logical_Operator_bypass_reg      : std_logic;  -- ufix1
  SIGNAL dataValidIn_2                    : std_logic;
  SIGNAL IFFTValid_out1                   : std_logic;
  SIGNAL IFFTValid_out1_1                 : std_logic;
  SIGNAL IFFT_HDL_Optimized_out1_re       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL IFFT_HDL_Optimized_out1_im       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL IFFT_HDL_Optimized_out2          : std_logic;
  SIGNAL IFFT_HDL_Optimized_out1_re_1     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL IFFT_HDL_Optimized_out1_im_1     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL IFFT_HDL_Optimized_out1_re_2     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL IFFT_HDL_Optimized_out1_im_2     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL preambleValidIn_3                : std_logic;
  SIGNAL preambleValidIn_4                : std_logic;
  SIGNAL Delay_reg                        : std_logic_vector(0 TO 171);  -- ufix1 [172]
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Delay_out1_1                     : std_logic;
  SIGNAL Delay_out1_2                     : std_logic;
  SIGNAL dataValidIn_3                    : std_logic;
  SIGNAL dataValidIn_4                    : std_logic;
  SIGNAL Delay1_reg                       : std_logic_vector(0 TO 171);  -- ufix1 [172]
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay1_out1_1                    : std_logic;
  SIGNAL Delay1_out1_2                    : std_logic;
  SIGNAL in_2_pipe1_bypass_reg            : std_logic;  -- ufix1
  SIGNAL Delay1_out1_3                    : std_logic;

BEGIN
  u_IFFTValid : ofdm_tx_src_IFFTValid
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_12_0 => enb_1_12_0,
              preambleValid => preambleValidIn_2,
              dataValid => dataValidIn_2,
              ifftValid => IFFTValid_out1
              );

  u_IFFT_HDL_Optimized : ofdm_tx_src_IFFT_HDL_Optimized
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_12_0 => enb_1_12_0,
              dataIn_re => std_logic_vector(dataIn_re_2),  -- sfix16_En14
              dataIn_im => std_logic_vector(dataIn_im_2),  -- sfix16_En14
              validIn => IFFTValid_out1_1,
              dataOut_re => IFFT_HDL_Optimized_out1_re,  -- sfix16_En14
              dataOut_im => IFFT_HDL_Optimized_out1_im,  -- sfix16_En14
              validOut => IFFT_HDL_Optimized_out2
              );

  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  in_0_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataIn_re_1 <= to_signed(16#0000#, 16);
      dataIn_im_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dataIn_re_1 <= dataIn_re_signed;
        dataIn_im_1 <= dataIn_im_signed;
      END IF;
    END IF;
  END PROCESS in_0_pipe_in_pipe_process;


  IFFT_HDL_Optimized1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      IFFT_HDL_Optimized1_bypass_reg_re <= to_signed(16#0000#, 16);
      IFFT_HDL_Optimized1_bypass_reg_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_1 = '1' THEN
        IFFT_HDL_Optimized1_bypass_reg_im <= dataIn_im_1;
        IFFT_HDL_Optimized1_bypass_reg_re <= dataIn_re_1;
      END IF;
    END IF;
  END PROCESS IFFT_HDL_Optimized1_bypass_process;

  
  dataIn_re_2 <= dataIn_re_1 WHEN enb_1_12_1 = '1' ELSE
      IFFT_HDL_Optimized1_bypass_reg_re;
  
  dataIn_im_2 <= dataIn_im_1 WHEN enb_1_12_1 = '1' ELSE
      IFFT_HDL_Optimized1_bypass_reg_im;

  in_1_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      preambleValidIn_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        preambleValidIn_1 <= preambleValidIn;
      END IF;
    END IF;
  END PROCESS in_1_pipe_in_pipe_process;


  NOT_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      NOT_bypass_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_1 = '1' THEN
        NOT_bypass_reg <= preambleValidIn_1;
      END IF;
    END IF;
  END PROCESS NOT_bypass_process;

  
  preambleValidIn_2 <= preambleValidIn_1 WHEN enb_1_12_1 = '1' ELSE
      NOT_bypass_reg;

  in_2_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataValidIn_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dataValidIn_1 <= dataValidIn;
      END IF;
    END IF;
  END PROCESS in_2_pipe_in_pipe_process;


  Logical_Operator_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Logical_Operator_bypass_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_1 = '1' THEN
        Logical_Operator_bypass_reg <= dataValidIn_1;
      END IF;
    END IF;
  END PROCESS Logical_Operator_bypass_process;

  
  dataValidIn_2 <= dataValidIn_1 WHEN enb_1_12_1 = '1' ELSE
      Logical_Operator_bypass_reg;

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      IFFTValid_out1_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        IFFTValid_out1_1 <= IFFTValid_out1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  IFFT_HDL_Optimized_out1_re_1 <= signed(IFFT_HDL_Optimized_out1_re);

  IFFT_HDL_Optimized_out1_im_1 <= signed(IFFT_HDL_Optimized_out1_im);

  out_0_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      IFFT_HDL_Optimized_out1_re_2 <= to_signed(16#0000#, 16);
      IFFT_HDL_Optimized_out1_im_2 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IFFT_HDL_Optimized_out1_re_2 <= IFFT_HDL_Optimized_out1_re_1;
        IFFT_HDL_Optimized_out1_im_2 <= IFFT_HDL_Optimized_out1_im_1;
      END IF;
    END IF;
  END PROCESS out_0_pipe_in_pipe_process;


  dataOut_re <= std_logic_vector(IFFT_HDL_Optimized_out1_re_2);

  dataOut_im <= std_logic_vector(IFFT_HDL_Optimized_out1_im_2);

  crp_out_delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      preambleValidIn_3 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        preambleValidIn_3 <= preambleValidIn_1;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Delay2_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      preambleValidIn_4 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_1 = '1' THEN
        preambleValidIn_4 <= preambleValidIn_3;
      END IF;
    END IF;
  END PROCESS Delay2_output_process;


  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Delay_reg(0) <= preambleValidIn_4;
        Delay_reg(1 TO 171) <= Delay_reg(0 TO 170);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(171);

  Delay_out1_1 <= Delay_out1;

  out_1_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1_2 <= Delay_out1_1;
      END IF;
    END IF;
  END PROCESS out_1_pipe_in_pipe_process;


  crp_out_delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataValidIn_3 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dataValidIn_3 <= dataValidIn_1;
      END IF;
    END IF;
  END PROCESS crp_out_delay1_process;


  Delay11_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataValidIn_4 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_1 = '1' THEN
        dataValidIn_4 <= dataValidIn_3;
      END IF;
    END IF;
  END PROCESS Delay11_output_process;


  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Delay1_reg(0) <= dataValidIn_4;
        Delay1_reg(1 TO 171) <= Delay1_reg(0 TO 170);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(171);

  Delay1_out1_1 <= Delay1_out1;

  out_2_pipe_in_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1_2 <= Delay1_out1_1;
      END IF;
    END IF;
  END PROCESS out_2_pipe_in_pipe_process;


  in_2_pipe1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in_2_pipe1_bypass_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_1 = '1' THEN
        in_2_pipe1_bypass_reg <= Delay1_out1_2;
      END IF;
    END IF;
  END PROCESS in_2_pipe1_bypass_process;

  
  Delay1_out1_3 <= Delay1_out1_2 WHEN enb_1_12_1 = '1' ELSE
      in_2_pipe1_bypass_reg;

  preambValidOut <= Delay_out1_2;

  dataValidOut <= Delay1_out1_3;

END rtl;

