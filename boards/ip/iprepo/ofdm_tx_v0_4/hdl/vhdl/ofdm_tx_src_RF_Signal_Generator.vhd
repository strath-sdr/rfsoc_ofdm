-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\OFDM_Tx_HW\ofdm_tx_src_RF_Signal_Generator.vhd
-- Created: 2022-03-24 21:51:00
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ofdm_tx_src_RF_Signal_Generator
-- Source Path: OFDM_Tx_HW/OFDMTx/DataGenerator/RF Signal Generator
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ofdm_tx_src_RF_Signal_Generator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_12_0                        :   IN    std_logic;
        Modulation                        :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Reset_1                           :   IN    std_logic;
        Enable                            :   IN    std_logic;
        m_axis_tdata_re                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        m_axis_tdata_im                   :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
        );
END ofdm_tx_src_RF_Signal_Generator;


ARCHITECTURE rtl OF ofdm_tx_src_RF_Signal_Generator IS

  -- Component Declarations
  COMPONENT ofdm_tx_src_Random_Generator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_12_0                      :   IN    std_logic;
          Reset_1                         :   IN    std_logic;
          Enable                          :   IN    std_logic;
          Data                            :   OUT   std_logic_vector(9 DOWNTO 0)  -- ufix10
          );
  END COMPONENT;

  COMPONENT ofdm_tx_src_Variable_Modulator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_12_0                      :   IN    std_logic;
          Select_rsvd                     :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Reset_1                         :   IN    std_logic;
          Enable                          :   IN    std_logic;
          Data                            :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          Q_symbols                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          I_symbols                       :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ofdm_tx_src_Random_Generator
    USE ENTITY work.ofdm_tx_src_Random_Generator(rtl);

  FOR ALL : ofdm_tx_src_Variable_Modulator
    USE ENTITY work.ofdm_tx_src_Variable_Modulator(rtl);

  -- Signals
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Random_Generator_out1            : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Variable_Modulator_out1          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Variable_Modulator_out2          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Variable_Modulator_out2_signed   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Variable_Modulator_out1_signed   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14

BEGIN
  u_Random_Generator : ofdm_tx_src_Random_Generator
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_12_0 => enb_1_12_0,
              Reset_1 => Reset_1,
              Enable => Delay_out1,
              Data => Random_Generator_out1  -- ufix10
              );

  u_Variable_Modulator : ofdm_tx_src_Variable_Modulator
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_12_0 => enb_1_12_0,
              Select_rsvd => Modulation,  -- uint32
              Reset_1 => Reset_1,
              Enable => Delay_out1,
              Data => Random_Generator_out1,  -- ufix10
              Q_symbols => Variable_Modulator_out1,  -- sfix16_En14
              I_symbols => Variable_Modulator_out2  -- sfix16_En14
              );

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Delay_out1 <= Enable;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Variable_Modulator_out2_signed <= signed(Variable_Modulator_out2);

  Variable_Modulator_out1_signed <= signed(Variable_Modulator_out1);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1_re <= to_signed(16#0000#, 16);
      Delay3_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Delay3_out1_re <= Variable_Modulator_out2_signed;
        Delay3_out1_im <= Variable_Modulator_out1_signed;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  m_axis_tdata_re <= std_logic_vector(Delay3_out1_re);

  m_axis_tdata_im <= std_logic_vector(Delay3_out1_im);

END rtl;

