-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\OFDM_Rx_HW\ofdm_rx_src_ChannelEstEq.vhd
-- Created: 2022-03-24 22:06:16
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ofdm_rx_src_ChannelEstEq
-- Source Path: OFDM_Rx_HW/OFDMRx/ChannelEstEq
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ofdm_rx_src_OFDMRx_pkg.ALL;

ENTITY ofdm_rx_src_ChannelEstEq IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_12_1                        :   IN    std_logic;
        enb_1_12_0                        :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(21 DOWNTO 0);  -- sfix22_En14
        dataIn_im                         :   IN    std_logic_vector(21 DOWNTO 0);  -- sfix22_En14
        dataValid                         :   IN    std_logic;
        preambleValid                     :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        dataOut_im                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        dataValidOut                      :   OUT   std_logic;
        chEstData                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END ofdm_rx_src_ChannelEstEq;


ARCHITECTURE rtl OF ofdm_rx_src_ChannelEstEq IS

  -- Component Declarations
  COMPONENT ofdm_rx_src_ChannelEstimate
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_12_1                      :   IN    std_logic;
          enb_1_12_0                      :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(21 DOWNTO 0);  -- sfix22_En14
          dataIn_im                       :   IN    std_logic_vector(21 DOWNTO 0);  -- sfix22_En14
          preambleValid                   :   IN    std_logic;
          dataValidIn                     :   IN    std_logic;
          chEstOut_re                     :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
          chEstOut_im                     :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
          dataValidOut                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_Equalise
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_12_1                      :   IN    std_logic;
          enb_1_12_0                      :   IN    std_logic;
          dataInEq_re                     :   IN    std_logic_vector(21 DOWNTO 0);  -- sfix22_En14
          dataInEq_im                     :   IN    std_logic_vector(21 DOWNTO 0);  -- sfix22_En14
          chEstIn_re                      :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
          chEstIn_im                      :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
          dataValidIn                     :   IN    std_logic;
          dataOutEq_re                    :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          dataOutEq_im                    :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          dataValidOut                    :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ofdm_rx_src_ChannelEstimate
    USE ENTITY work.ofdm_rx_src_ChannelEstimate(rtl);

  FOR ALL : ofdm_rx_src_Equalise
    USE ENTITY work.ofdm_rx_src_Equalise(rtl);

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL dataIn_im_signed                 : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Delay_reg_re                     : vector_of_signed22(0 TO 5);  -- sfix22_En14 [6]
  SIGNAL Delay_reg_im                     : vector_of_signed22(0 TO 5);  -- sfix22_En14 [6]
  SIGNAL Delay_out1_re                    : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Delay_out1_im                    : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL ChannelEstimate_out1_re          : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL ChannelEstimate_out1_im          : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL ChannelEstimate_out2             : std_logic;
  SIGNAL Equalise_out1_re                 : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Equalise_out1_im                 : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Equalise_out2                    : std_logic;
  SIGNAL ChannelEstimate_out1_re_signed   : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL ChannelEstimate_out1_im_signed   : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Data_Type_Conversion1_out1_re    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Data_Type_Conversion1_out1_im    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Data_Type_Conversion4_out1       : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Data_Type_Conversion3_out1       : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Bit_Concat1_out1                 : unsigned(31 DOWNTO 0);  -- uint32

BEGIN
  u_ChannelEstimate : ofdm_rx_src_ChannelEstimate
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_12_1 => enb_1_12_1,
              enb_1_12_0 => enb_1_12_0,
              dataIn_re => dataIn_re,  -- sfix22_En14
              dataIn_im => dataIn_im,  -- sfix22_En14
              preambleValid => preambleValid,
              dataValidIn => dataValid,
              chEstOut_re => ChannelEstimate_out1_re,  -- sfix17_En14
              chEstOut_im => ChannelEstimate_out1_im,  -- sfix17_En14
              dataValidOut => ChannelEstimate_out2
              );

  u_Equalise : ofdm_rx_src_Equalise
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_12_1 => enb_1_12_1,
              enb_1_12_0 => enb_1_12_0,
              dataInEq_re => std_logic_vector(Delay_out1_re),  -- sfix22_En14
              dataInEq_im => std_logic_vector(Delay_out1_im),  -- sfix22_En14
              chEstIn_re => ChannelEstimate_out1_re,  -- sfix17_En14
              chEstIn_im => ChannelEstimate_out1_im,  -- sfix17_En14
              dataValidIn => ChannelEstimate_out2,
              dataOutEq_re => Equalise_out1_re,  -- sfix18_En15
              dataOutEq_im => Equalise_out1_im,  -- sfix18_En15
              dataValidOut => Equalise_out2
              );

  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_reg_re <= (OTHERS => to_signed(16#000000#, 22));
      Delay_reg_im <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Delay_reg_im(0) <= dataIn_im_signed;
        Delay_reg_im(1 TO 5) <= Delay_reg_im(0 TO 4);
        Delay_reg_re(0) <= dataIn_re_signed;
        Delay_reg_re(1 TO 5) <= Delay_reg_re(0 TO 4);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1_re <= Delay_reg_re(5);
  Delay_out1_im <= Delay_reg_im(5);

  ChannelEstimate_out1_re_signed <= signed(ChannelEstimate_out1_re);

  ChannelEstimate_out1_im_signed <= signed(ChannelEstimate_out1_im);

  Data_Type_Conversion1_out1_re <= ChannelEstimate_out1_re_signed(15 DOWNTO 0);
  Data_Type_Conversion1_out1_im <= ChannelEstimate_out1_im_signed(15 DOWNTO 0);

  Data_Type_Conversion4_out1 <= unsigned(Data_Type_Conversion1_out1_im);

  Data_Type_Conversion3_out1 <= unsigned(Data_Type_Conversion1_out1_re);

  Bit_Concat1_out1 <= Data_Type_Conversion4_out1 & Data_Type_Conversion3_out1;

  chEstData <= std_logic_vector(Bit_Concat1_out1);

  dataOut_re <= Equalise_out1_re;

  dataOut_im <= Equalise_out1_im;

  dataValidOut <= Equalise_out2;

END rtl;

