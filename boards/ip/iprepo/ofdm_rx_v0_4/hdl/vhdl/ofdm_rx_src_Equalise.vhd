-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\OFDM_Rx_HW\ofdm_rx_src_Equalise.vhd
-- Created: 2022-03-24 22:06:16
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ofdm_rx_src_Equalise
-- Source Path: OFDM_Rx_HW/OFDMRx/ChannelEstEq/Equalise
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ofdm_rx_src_Equalise IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_12_1                        :   IN    std_logic;
        enb_1_12_0                        :   IN    std_logic;
        dataInEq_re                       :   IN    std_logic_vector(21 DOWNTO 0);  -- sfix22_En14
        dataInEq_im                       :   IN    std_logic_vector(21 DOWNTO 0);  -- sfix22_En14
        chEstIn_re                        :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
        chEstIn_im                        :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
        dataValidIn                       :   IN    std_logic;
        dataOutEq_re                      :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        dataOutEq_im                      :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        dataValidOut                      :   OUT   std_logic
        );
END ofdm_rx_src_Equalise;


ARCHITECTURE rtl OF ofdm_rx_src_Equalise IS

  -- Component Declarations
  COMPONENT ofdm_rx_src_Complex_Mult
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_12_1                      :   IN    std_logic;
          enb_1_12_0                      :   IN    std_logic;
          In1_re                          :   IN    std_logic_vector(21 DOWNTO 0);  -- sfix22_En14
          In1_im                          :   IN    std_logic_vector(21 DOWNTO 0);  -- sfix22_En14
          In2_re                          :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
          In2_im                          :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
          Out1_re                         :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          Out1_im                         :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En15
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_Abs2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_12_1                      :   IN    std_logic;
          enb_1_12_0                      :   IN    std_logic;
          ChEstIn_re                      :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
          ChEstIn_im                      :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En14
          Out1                            :   OUT   std_logic_vector(15 DOWNTO 0)  -- ufix16_En14
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_Divide
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_12_1                      :   IN    std_logic;
          enb_1_12_0                      :   IN    std_logic;
          In1_re                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          In1_im                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          In2                             :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En14
          dataOutEq_re                    :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          dataOutEq_im                    :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En15
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ofdm_rx_src_Complex_Mult
    USE ENTITY work.ofdm_rx_src_Complex_Mult(rtl);

  FOR ALL : ofdm_rx_src_Abs2
    USE ENTITY work.ofdm_rx_src_Abs2(rtl);

  FOR ALL : ofdm_rx_src_Divide
    USE ENTITY work.ofdm_rx_src_Divide(rtl);

  -- Signals
  SIGNAL Complex_Mult_out1_re             : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Complex_Mult_out1_im             : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Abs2_out1                        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Divide_out1_re                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Divide_out1_im                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Delay8_reg                       : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL Delay1_reg                       : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Delay1_out1                      : std_logic;

BEGIN
  -- Perform a complex division to obtain equalised data symbols.

  u_Complex_Mult : ofdm_rx_src_Complex_Mult
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_12_1 => enb_1_12_1,
              enb_1_12_0 => enb_1_12_0,
              In1_re => dataInEq_re,  -- sfix22_En14
              In1_im => dataInEq_im,  -- sfix22_En14
              In2_re => chEstIn_re,  -- sfix17_En14
              In2_im => chEstIn_im,  -- sfix17_En14
              Out1_re => Complex_Mult_out1_re,  -- sfix18_En15
              Out1_im => Complex_Mult_out1_im  -- sfix18_En15
              );

  u_Abs2 : ofdm_rx_src_Abs2
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_12_1 => enb_1_12_1,
              enb_1_12_0 => enb_1_12_0,
              ChEstIn_re => chEstIn_re,  -- sfix17_En14
              ChEstIn_im => chEstIn_im,  -- sfix17_En14
              Out1 => Abs2_out1  -- ufix16_En14
              );

  u_Divide : ofdm_rx_src_Divide
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_12_1 => enb_1_12_1,
              enb_1_12_0 => enb_1_12_0,
              In1_re => Complex_Mult_out1_re,  -- sfix18_En15
              In1_im => Complex_Mult_out1_im,  -- sfix18_En15
              In2 => Abs2_out1,  -- ufix16_En14
              dataOutEq_re => Divide_out1_re,  -- sfix18_En15
              dataOutEq_im => Divide_out1_im  -- sfix18_En15
              );

  Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Delay8_reg(0) <= dataValidIn;
        Delay8_reg(1 TO 2) <= Delay8_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS Delay8_process;

  Delay8_out1 <= Delay8_reg(2);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Delay1_reg(0) <= Delay8_out1;
        Delay1_reg(1) <= Delay1_reg(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(1);

  dataOutEq_re <= Divide_out1_re;

  dataOutEq_im <= Divide_out1_im;

  dataValidOut <= Delay1_out1;

END rtl;

