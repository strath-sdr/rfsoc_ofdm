-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\OFDM_Rx_HW\ofdm_rx_src_CordicRotate.vhd
-- Created: 2022-03-24 22:06:16
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ofdm_rx_src_CordicRotate
-- Source Path: OFDM_Rx_HW/OFDMRx/PhaseTracking_1/CordicRotate
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ofdm_rx_src_OFDMRx_pkg.ALL;

ENTITY ofdm_rx_src_CordicRotate IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_12_1                        :   IN    std_logic;
        enb_1_12_0                        :   IN    std_logic;
        DataInRotate_re                   :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        DataInRotate_im                   :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        PhaseInRotate                     :   IN    std_logic_vector(22 DOWNTO 0);  -- sfix23_En20
        dataValidIn                       :   IN    std_logic;
        DataOutRotate_re                  :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        DataOutRotate_im                  :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        dataValidOut                      :   OUT   std_logic
        );
END ofdm_rx_src_CordicRotate;


ARCHITECTURE rtl OF ofdm_rx_src_CordicRotate IS

  -- Component Declarations
  COMPONENT ofdm_rx_src_QUAD_MAP
    PORT( Xin                             :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Yin                             :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          ANG_IN                          :   IN    std_logic_vector(22 DOWNTO 0);  -- sfix23_En20
          Xout                            :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Yout                            :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          ANG_OUT                         :   OUT   std_logic_vector(22 DOWNTO 0);  -- sfix23_En20
          QUAD_CTRL_OUT                   :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_Cell0
    PORT( X_in_0                          :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Y_in_0                          :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Ang_in_0                        :   IN    std_logic_vector(22 DOWNTO 0);  -- sfix23_En20
          X_out_0                         :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Y_out_0                         :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Ang_out_0                       :   OUT   std_logic_vector(22 DOWNTO 0)  -- sfix23_En20
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_Cell1
    PORT( X_in_0                          :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Y_in_0                          :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Ang_in_0                        :   IN    std_logic_vector(22 DOWNTO 0);  -- sfix23_En20
          X_out_0                         :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Y_out_0                         :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Ang_out_0                       :   OUT   std_logic_vector(22 DOWNTO 0)  -- sfix23_En20
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_Cell2
    PORT( X_in_0                          :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Y_in_0                          :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Ang_in_0                        :   IN    std_logic_vector(22 DOWNTO 0);  -- sfix23_En20
          X_out_0                         :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Y_out_0                         :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Ang_out_0                       :   OUT   std_logic_vector(22 DOWNTO 0)  -- sfix23_En20
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_Cell3
    PORT( X_in_0                          :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Y_in_0                          :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Ang_in_0                        :   IN    std_logic_vector(22 DOWNTO 0);  -- sfix23_En20
          X_out_0                         :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Y_out_0                         :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Ang_out_0                       :   OUT   std_logic_vector(22 DOWNTO 0)  -- sfix23_En20
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_Cell4
    PORT( X_in_0                          :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Y_in_0                          :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Ang_in_0                        :   IN    std_logic_vector(22 DOWNTO 0);  -- sfix23_En20
          X_out_0                         :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Y_out_0                         :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Ang_out_0                       :   OUT   std_logic_vector(22 DOWNTO 0)  -- sfix23_En20
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_Cell5
    PORT( X_in_0                          :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Y_in_0                          :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Ang_in_0                        :   IN    std_logic_vector(22 DOWNTO 0);  -- sfix23_En20
          X_out_0                         :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Y_out_0                         :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Ang_out_0                       :   OUT   std_logic_vector(22 DOWNTO 0)  -- sfix23_En20
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_Cell6
    PORT( X_in_0                          :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Y_in_0                          :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Ang_in_0                        :   IN    std_logic_vector(22 DOWNTO 0);  -- sfix23_En20
          X_out_0                         :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Y_out_0                         :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Ang_out_0                       :   OUT   std_logic_vector(22 DOWNTO 0)  -- sfix23_En20
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_Cell7
    PORT( X_in_0                          :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Y_in_0                          :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Ang_in_0                        :   IN    std_logic_vector(22 DOWNTO 0);  -- sfix23_En20
          X_out_0                         :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Y_out_0                         :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Ang_out_0                       :   OUT   std_logic_vector(22 DOWNTO 0)  -- sfix23_En20
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_Cell8
    PORT( X_in_0                          :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Y_in_0                          :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Ang_in_0                        :   IN    std_logic_vector(22 DOWNTO 0);  -- sfix23_En20
          X_out_0                         :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Y_out_0                         :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Ang_out_0                       :   OUT   std_logic_vector(22 DOWNTO 0)  -- sfix23_En20
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_Cell9
    PORT( X_in_0                          :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Y_in_0                          :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Ang_in_0                        :   IN    std_logic_vector(22 DOWNTO 0);  -- sfix23_En20
          X_out_0                         :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Y_out_0                         :   OUT   std_logic_vector(20 DOWNTO 0)  -- sfix21_En15
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_QCORR
    PORT( X_in                            :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Y_in                            :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Ctrl_in                         :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          X_out                           :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          Y_out                           :   OUT   std_logic_vector(20 DOWNTO 0)  -- sfix21_En15
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_GAIN_CORR
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          XIN                             :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          XOUT                            :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En15
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_GAIN_CORR1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          YIN                             :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En15
          YOUT                            :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En15
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ofdm_rx_src_QUAD_MAP
    USE ENTITY work.ofdm_rx_src_QUAD_MAP(rtl);

  FOR ALL : ofdm_rx_src_Cell0
    USE ENTITY work.ofdm_rx_src_Cell0(rtl);

  FOR ALL : ofdm_rx_src_Cell1
    USE ENTITY work.ofdm_rx_src_Cell1(rtl);

  FOR ALL : ofdm_rx_src_Cell2
    USE ENTITY work.ofdm_rx_src_Cell2(rtl);

  FOR ALL : ofdm_rx_src_Cell3
    USE ENTITY work.ofdm_rx_src_Cell3(rtl);

  FOR ALL : ofdm_rx_src_Cell4
    USE ENTITY work.ofdm_rx_src_Cell4(rtl);

  FOR ALL : ofdm_rx_src_Cell5
    USE ENTITY work.ofdm_rx_src_Cell5(rtl);

  FOR ALL : ofdm_rx_src_Cell6
    USE ENTITY work.ofdm_rx_src_Cell6(rtl);

  FOR ALL : ofdm_rx_src_Cell7
    USE ENTITY work.ofdm_rx_src_Cell7(rtl);

  FOR ALL : ofdm_rx_src_Cell8
    USE ENTITY work.ofdm_rx_src_Cell8(rtl);

  FOR ALL : ofdm_rx_src_Cell9
    USE ENTITY work.ofdm_rx_src_Cell9(rtl);

  FOR ALL : ofdm_rx_src_QCORR
    USE ENTITY work.ofdm_rx_src_QCORR(rtl);

  FOR ALL : ofdm_rx_src_GAIN_CORR
    USE ENTITY work.ofdm_rx_src_GAIN_CORR(rtl);

  FOR ALL : ofdm_rx_src_GAIN_CORR1
    USE ENTITY work.ofdm_rx_src_GAIN_CORR1(rtl);

  -- Signals
  SIGNAL DataInRotate_re_signed           : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL DataInRotate_im_signed           : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Data_Type_Conversion8_out1       : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Data_Type_Conversion9_out1       : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL kconst                           : signed(22 DOWNTO 0);  -- sfix23_En22
  SIGNAL kconst_1                         : signed(22 DOWNTO 0);  -- sfix23_En22
  SIGNAL PhaseInRotate_1                  : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL PhaseInRotate_2                  : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Gain1_mul_temp                   : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL Gain1_out1                       : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Gain1_out1_1                     : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Data_Type_Conversion8_out1_1     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Data_Type_Conversion9_out1_1     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Delay1_bypass_reg                : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL Gain1_out1_2                     : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL QUAD_MAP_out1                    : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL QUAD_MAP_out2                    : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL ang_out                          : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL QUAD                             : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL QUAD_MAP_out1_signed             : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL QUAD_MAP_out2_signed             : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL ang_out_signed                   : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL QUAD_MAP_out1_1                  : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL QUAD_MAP_out2_1                  : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL ang_out_1                        : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Cell0_out1                       : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Cell0_out2                       : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Cell0_out3                       : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL Cell0_out1_signed                : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell0_out2_signed                : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell0_out3_signed                : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Cell0_out1_1                     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell0_out2_1                     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell0_out3_1                     : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Cell1_out1                       : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Cell1_out2                       : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Cell1_out3                       : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL Cell1_out1_signed                : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell1_out2_signed                : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell1_out3_signed                : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Cell1_out1_1                     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell1_out2_1                     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell1_out3_1                     : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Cell2_out1                       : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Cell2_out2                       : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Cell2_out3                       : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL Cell2_out1_signed                : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell2_out2_signed                : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell2_out3_signed                : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Cell2_out1_1                     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell2_out2_1                     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell2_out3_1                     : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Cell3_out1                       : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Cell3_out2                       : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Cell3_out3                       : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL Cell3_out1_signed                : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell3_out2_signed                : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell3_out3_signed                : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Cell3_out1_1                     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell3_out2_1                     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell3_out3_1                     : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Cell4_out1                       : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Cell4_out2                       : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Cell4_out3                       : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL Cell4_out1_signed                : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell4_out2_signed                : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell4_out3_signed                : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Cell4_out1_1                     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell4_out2_1                     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell4_out3_1                     : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Cell5_out1                       : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Cell5_out2                       : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Cell5_out3                       : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL Cell5_out1_signed                : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell5_out2_signed                : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell5_out3_signed                : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Cell5_out1_1                     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell5_out2_1                     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell5_out3_1                     : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Cell6_out1                       : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Cell6_out2                       : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Cell6_out3                       : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL Cell6_out1_signed                : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell6_out2_signed                : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell6_out3_signed                : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Cell6_out1_1                     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell6_out2_1                     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell6_out3_1                     : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Cell7_out1                       : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Cell7_out2                       : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Cell7_out3                       : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL Cell7_out1_signed                : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell7_out2_signed                : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell7_out3_signed                : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Cell7_out1_1                     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell7_out2_1                     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell7_out3_1                     : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Cell8_out1                       : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Cell8_out2                       : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Cell8_out3                       : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL Cell8_out1_signed                : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell8_out2_signed                : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell8_out3_signed                : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Cell8_out1_1                     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell8_out2_1                     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell8_out3_1                     : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Cell9_out1                       : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Cell9_out2                       : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Cell9_out1_signed                : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell9_out2_signed                : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL QUAD_unsigned                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Cell9_out1_1                     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Cell9_out2_1                     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Delay45_reg                      : vector_of_unsigned2(0 TO 10);  -- ufix2 [11]
  SIGNAL Delay45_out1                     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL xout                             : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL yout                             : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL xout_signed                      : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Delay46_out1                     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Delay46_out1_1                   : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL GAIN_CORR_out1                   : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL GAIN_CORR_out1_signed            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay86_bypass_reg               : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL GAIN_CORR_out1_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL yout_signed                      : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Delay49_out1                     : signed(20 DOWNTO 0);  -- sfix21_En15
  SIGNAL Delay49_out1_1                   : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL GAIN_CORR1_out1                  : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL GAIN_CORR1_out1_signed           : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay42_bypass_reg               : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL GAIN_CORR1_out1_1                : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Real_Imag_to_Complex_out1_re     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Real_Imag_to_Complex_out1_im     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay50_reg                      : std_logic_vector(0 TO 13);  -- ufix1 [14]
  SIGNAL Delay50_out1                     : std_logic;

BEGIN
  u_QUAD_MAP : ofdm_rx_src_QUAD_MAP
    PORT MAP( Xin => std_logic_vector(Data_Type_Conversion8_out1_1),  -- sfix21_En15
              Yin => std_logic_vector(Data_Type_Conversion9_out1_1),  -- sfix21_En15
              ANG_IN => std_logic_vector(Gain1_out1_2),  -- sfix23_En20
              Xout => QUAD_MAP_out1,  -- sfix21_En15
              Yout => QUAD_MAP_out2,  -- sfix21_En15
              ANG_OUT => ang_out,  -- sfix23_En20
              QUAD_CTRL_OUT => QUAD  -- ufix2
              );

  u_Cell0 : ofdm_rx_src_Cell0
    PORT MAP( X_in_0 => std_logic_vector(QUAD_MAP_out1_1),  -- sfix21_En15
              Y_in_0 => std_logic_vector(QUAD_MAP_out2_1),  -- sfix21_En15
              Ang_in_0 => std_logic_vector(ang_out_1),  -- sfix23_En20
              X_out_0 => Cell0_out1,  -- sfix21_En15
              Y_out_0 => Cell0_out2,  -- sfix21_En15
              Ang_out_0 => Cell0_out3  -- sfix23_En20
              );

  u_Cell1 : ofdm_rx_src_Cell1
    PORT MAP( X_in_0 => std_logic_vector(Cell0_out1_1),  -- sfix21_En15
              Y_in_0 => std_logic_vector(Cell0_out2_1),  -- sfix21_En15
              Ang_in_0 => std_logic_vector(Cell0_out3_1),  -- sfix23_En20
              X_out_0 => Cell1_out1,  -- sfix21_En15
              Y_out_0 => Cell1_out2,  -- sfix21_En15
              Ang_out_0 => Cell1_out3  -- sfix23_En20
              );

  u_Cell2 : ofdm_rx_src_Cell2
    PORT MAP( X_in_0 => std_logic_vector(Cell1_out1_1),  -- sfix21_En15
              Y_in_0 => std_logic_vector(Cell1_out2_1),  -- sfix21_En15
              Ang_in_0 => std_logic_vector(Cell1_out3_1),  -- sfix23_En20
              X_out_0 => Cell2_out1,  -- sfix21_En15
              Y_out_0 => Cell2_out2,  -- sfix21_En15
              Ang_out_0 => Cell2_out3  -- sfix23_En20
              );

  u_Cell3 : ofdm_rx_src_Cell3
    PORT MAP( X_in_0 => std_logic_vector(Cell2_out1_1),  -- sfix21_En15
              Y_in_0 => std_logic_vector(Cell2_out2_1),  -- sfix21_En15
              Ang_in_0 => std_logic_vector(Cell2_out3_1),  -- sfix23_En20
              X_out_0 => Cell3_out1,  -- sfix21_En15
              Y_out_0 => Cell3_out2,  -- sfix21_En15
              Ang_out_0 => Cell3_out3  -- sfix23_En20
              );

  u_Cell4 : ofdm_rx_src_Cell4
    PORT MAP( X_in_0 => std_logic_vector(Cell3_out1_1),  -- sfix21_En15
              Y_in_0 => std_logic_vector(Cell3_out2_1),  -- sfix21_En15
              Ang_in_0 => std_logic_vector(Cell3_out3_1),  -- sfix23_En20
              X_out_0 => Cell4_out1,  -- sfix21_En15
              Y_out_0 => Cell4_out2,  -- sfix21_En15
              Ang_out_0 => Cell4_out3  -- sfix23_En20
              );

  u_Cell5 : ofdm_rx_src_Cell5
    PORT MAP( X_in_0 => std_logic_vector(Cell4_out1_1),  -- sfix21_En15
              Y_in_0 => std_logic_vector(Cell4_out2_1),  -- sfix21_En15
              Ang_in_0 => std_logic_vector(Cell4_out3_1),  -- sfix23_En20
              X_out_0 => Cell5_out1,  -- sfix21_En15
              Y_out_0 => Cell5_out2,  -- sfix21_En15
              Ang_out_0 => Cell5_out3  -- sfix23_En20
              );

  u_Cell6 : ofdm_rx_src_Cell6
    PORT MAP( X_in_0 => std_logic_vector(Cell5_out1_1),  -- sfix21_En15
              Y_in_0 => std_logic_vector(Cell5_out2_1),  -- sfix21_En15
              Ang_in_0 => std_logic_vector(Cell5_out3_1),  -- sfix23_En20
              X_out_0 => Cell6_out1,  -- sfix21_En15
              Y_out_0 => Cell6_out2,  -- sfix21_En15
              Ang_out_0 => Cell6_out3  -- sfix23_En20
              );

  u_Cell7 : ofdm_rx_src_Cell7
    PORT MAP( X_in_0 => std_logic_vector(Cell6_out1_1),  -- sfix21_En15
              Y_in_0 => std_logic_vector(Cell6_out2_1),  -- sfix21_En15
              Ang_in_0 => std_logic_vector(Cell6_out3_1),  -- sfix23_En20
              X_out_0 => Cell7_out1,  -- sfix21_En15
              Y_out_0 => Cell7_out2,  -- sfix21_En15
              Ang_out_0 => Cell7_out3  -- sfix23_En20
              );

  u_Cell8 : ofdm_rx_src_Cell8
    PORT MAP( X_in_0 => std_logic_vector(Cell7_out1_1),  -- sfix21_En15
              Y_in_0 => std_logic_vector(Cell7_out2_1),  -- sfix21_En15
              Ang_in_0 => std_logic_vector(Cell7_out3_1),  -- sfix23_En20
              X_out_0 => Cell8_out1,  -- sfix21_En15
              Y_out_0 => Cell8_out2,  -- sfix21_En15
              Ang_out_0 => Cell8_out3  -- sfix23_En20
              );

  u_Cell9 : ofdm_rx_src_Cell9
    PORT MAP( X_in_0 => std_logic_vector(Cell8_out1_1),  -- sfix21_En15
              Y_in_0 => std_logic_vector(Cell8_out2_1),  -- sfix21_En15
              Ang_in_0 => std_logic_vector(Cell8_out3_1),  -- sfix23_En20
              X_out_0 => Cell9_out1,  -- sfix21_En15
              Y_out_0 => Cell9_out2  -- sfix21_En15
              );

  u_QCORR : ofdm_rx_src_QCORR
    PORT MAP( X_in => std_logic_vector(Cell9_out1_1),  -- sfix21_En15
              Y_in => std_logic_vector(Cell9_out2_1),  -- sfix21_En15
              Ctrl_in => std_logic_vector(Delay45_out1),  -- ufix2
              X_out => xout,  -- sfix21_En15
              Y_out => yout  -- sfix21_En15
              );

  u_GAIN_CORR : ofdm_rx_src_GAIN_CORR
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              XIN => Delay46_out1_1,  -- sfix21_En15
              XOUT => GAIN_CORR_out1  -- sfix18_En15
              );

  u_GAIN_CORR1 : ofdm_rx_src_GAIN_CORR1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              YIN => Delay49_out1_1,  -- sfix21_En15
              YOUT => GAIN_CORR1_out1  -- sfix18_En15
              );

  DataInRotate_re_signed <= signed(DataInRotate_re);

  Data_Type_Conversion8_out1 <= resize(DataInRotate_re_signed, 21);

  DataInRotate_im_signed <= signed(DataInRotate_im);

  Data_Type_Conversion9_out1 <= resize(DataInRotate_im_signed, 21);

  kconst <= to_signed(-16#400000#, 23);

  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_1 <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_1 <= kconst;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  PhaseInRotate_1 <= signed(PhaseInRotate);

  HwModeRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PhaseInRotate_2 <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        PhaseInRotate_2 <= PhaseInRotate_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  Gain1_mul_temp <= kconst_1 * PhaseInRotate_2;
  Gain1_out1 <= Gain1_mul_temp(44 DOWNTO 22);

  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain1_out1_1 <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain1_out1_1 <= Gain1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  delayMatch29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion8_out1_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Data_Type_Conversion8_out1_1 <= Data_Type_Conversion8_out1;
      END IF;
    END IF;
  END PROCESS delayMatch29_process;


  delayMatch30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion9_out1_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Data_Type_Conversion9_out1_1 <= Data_Type_Conversion9_out1;
      END IF;
    END IF;
  END PROCESS delayMatch30_process;


  Delay1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_bypass_reg <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_1 = '1' THEN
        Delay1_bypass_reg <= Gain1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay1_bypass_process;

  
  Gain1_out1_2 <= Gain1_out1_1 WHEN enb_1_12_1 = '1' ELSE
      Delay1_bypass_reg;

  QUAD_MAP_out1_signed <= signed(QUAD_MAP_out1);

  QUAD_MAP_out2_signed <= signed(QUAD_MAP_out2);

  ang_out_signed <= signed(ang_out);

  delayMatch31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      QUAD_MAP_out1_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        QUAD_MAP_out1_1 <= QUAD_MAP_out1_signed;
      END IF;
    END IF;
  END PROCESS delayMatch31_process;


  delayMatch32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      QUAD_MAP_out2_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        QUAD_MAP_out2_1 <= QUAD_MAP_out2_signed;
      END IF;
    END IF;
  END PROCESS delayMatch32_process;


  delayMatch33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ang_out_1 <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        ang_out_1 <= ang_out_signed;
      END IF;
    END IF;
  END PROCESS delayMatch33_process;


  Cell0_out1_signed <= signed(Cell0_out1);

  Cell0_out2_signed <= signed(Cell0_out2);

  Cell0_out3_signed <= signed(Cell0_out3);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell0_out1_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell0_out1_1 <= Cell0_out1_signed;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell0_out2_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell0_out2_1 <= Cell0_out2_signed;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell0_out3_1 <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell0_out3_1 <= Cell0_out3_signed;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  Cell1_out1_signed <= signed(Cell1_out1);

  Cell1_out2_signed <= signed(Cell1_out2);

  Cell1_out3_signed <= signed(Cell1_out3);

  delayMatch3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell1_out1_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell1_out1_1 <= Cell1_out1_signed;
      END IF;
    END IF;
  END PROCESS delayMatch3_process;


  delayMatch4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell1_out2_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell1_out2_1 <= Cell1_out2_signed;
      END IF;
    END IF;
  END PROCESS delayMatch4_process;


  delayMatch5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell1_out3_1 <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell1_out3_1 <= Cell1_out3_signed;
      END IF;
    END IF;
  END PROCESS delayMatch5_process;


  Cell2_out1_signed <= signed(Cell2_out1);

  Cell2_out2_signed <= signed(Cell2_out2);

  Cell2_out3_signed <= signed(Cell2_out3);

  delayMatch6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell2_out1_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell2_out1_1 <= Cell2_out1_signed;
      END IF;
    END IF;
  END PROCESS delayMatch6_process;


  delayMatch7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell2_out2_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell2_out2_1 <= Cell2_out2_signed;
      END IF;
    END IF;
  END PROCESS delayMatch7_process;


  delayMatch8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell2_out3_1 <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell2_out3_1 <= Cell2_out3_signed;
      END IF;
    END IF;
  END PROCESS delayMatch8_process;


  Cell3_out1_signed <= signed(Cell3_out1);

  Cell3_out2_signed <= signed(Cell3_out2);

  Cell3_out3_signed <= signed(Cell3_out3);

  delayMatch9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell3_out1_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell3_out1_1 <= Cell3_out1_signed;
      END IF;
    END IF;
  END PROCESS delayMatch9_process;


  delayMatch10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell3_out2_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell3_out2_1 <= Cell3_out2_signed;
      END IF;
    END IF;
  END PROCESS delayMatch10_process;


  delayMatch11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell3_out3_1 <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell3_out3_1 <= Cell3_out3_signed;
      END IF;
    END IF;
  END PROCESS delayMatch11_process;


  Cell4_out1_signed <= signed(Cell4_out1);

  Cell4_out2_signed <= signed(Cell4_out2);

  Cell4_out3_signed <= signed(Cell4_out3);

  delayMatch12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell4_out1_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell4_out1_1 <= Cell4_out1_signed;
      END IF;
    END IF;
  END PROCESS delayMatch12_process;


  delayMatch13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell4_out2_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell4_out2_1 <= Cell4_out2_signed;
      END IF;
    END IF;
  END PROCESS delayMatch13_process;


  delayMatch14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell4_out3_1 <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell4_out3_1 <= Cell4_out3_signed;
      END IF;
    END IF;
  END PROCESS delayMatch14_process;


  Cell5_out1_signed <= signed(Cell5_out1);

  Cell5_out2_signed <= signed(Cell5_out2);

  Cell5_out3_signed <= signed(Cell5_out3);

  delayMatch15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell5_out1_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell5_out1_1 <= Cell5_out1_signed;
      END IF;
    END IF;
  END PROCESS delayMatch15_process;


  delayMatch16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell5_out2_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell5_out2_1 <= Cell5_out2_signed;
      END IF;
    END IF;
  END PROCESS delayMatch16_process;


  delayMatch17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell5_out3_1 <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell5_out3_1 <= Cell5_out3_signed;
      END IF;
    END IF;
  END PROCESS delayMatch17_process;


  Cell6_out1_signed <= signed(Cell6_out1);

  Cell6_out2_signed <= signed(Cell6_out2);

  Cell6_out3_signed <= signed(Cell6_out3);

  delayMatch18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell6_out1_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell6_out1_1 <= Cell6_out1_signed;
      END IF;
    END IF;
  END PROCESS delayMatch18_process;


  delayMatch19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell6_out2_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell6_out2_1 <= Cell6_out2_signed;
      END IF;
    END IF;
  END PROCESS delayMatch19_process;


  delayMatch20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell6_out3_1 <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell6_out3_1 <= Cell6_out3_signed;
      END IF;
    END IF;
  END PROCESS delayMatch20_process;


  Cell7_out1_signed <= signed(Cell7_out1);

  Cell7_out2_signed <= signed(Cell7_out2);

  Cell7_out3_signed <= signed(Cell7_out3);

  delayMatch21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell7_out1_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell7_out1_1 <= Cell7_out1_signed;
      END IF;
    END IF;
  END PROCESS delayMatch21_process;


  delayMatch22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell7_out2_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell7_out2_1 <= Cell7_out2_signed;
      END IF;
    END IF;
  END PROCESS delayMatch22_process;


  delayMatch23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell7_out3_1 <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell7_out3_1 <= Cell7_out3_signed;
      END IF;
    END IF;
  END PROCESS delayMatch23_process;


  Cell8_out1_signed <= signed(Cell8_out1);

  Cell8_out2_signed <= signed(Cell8_out2);

  Cell8_out3_signed <= signed(Cell8_out3);

  delayMatch24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell8_out1_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell8_out1_1 <= Cell8_out1_signed;
      END IF;
    END IF;
  END PROCESS delayMatch24_process;


  delayMatch25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell8_out2_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell8_out2_1 <= Cell8_out2_signed;
      END IF;
    END IF;
  END PROCESS delayMatch25_process;


  delayMatch26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell8_out3_1 <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell8_out3_1 <= Cell8_out3_signed;
      END IF;
    END IF;
  END PROCESS delayMatch26_process;


  Cell9_out1_signed <= signed(Cell9_out1);

  Cell9_out2_signed <= signed(Cell9_out2);

  QUAD_unsigned <= unsigned(QUAD);

  delayMatch27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell9_out1_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell9_out1_1 <= Cell9_out1_signed;
      END IF;
    END IF;
  END PROCESS delayMatch27_process;


  delayMatch28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Cell9_out2_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Cell9_out2_1 <= Cell9_out2_signed;
      END IF;
    END IF;
  END PROCESS delayMatch28_process;


  Delay45_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay45_reg <= (OTHERS => to_unsigned(16#0#, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Delay45_reg(0) <= QUAD_unsigned;
        Delay45_reg(1 TO 10) <= Delay45_reg(0 TO 9);
      END IF;
    END IF;
  END PROCESS Delay45_process;

  Delay45_out1 <= Delay45_reg(10);

  xout_signed <= signed(xout);

  Delay46_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay46_out1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Delay46_out1 <= xout_signed;
      END IF;
    END IF;
  END PROCESS Delay46_process;


  Delay46_out1_1 <= std_logic_vector(Delay46_out1);

  GAIN_CORR_out1_signed <= signed(GAIN_CORR_out1);

  Delay86_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay86_bypass_reg <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_1 = '1' THEN
        Delay86_bypass_reg <= GAIN_CORR_out1_signed;
      END IF;
    END IF;
  END PROCESS Delay86_bypass_process;

  
  GAIN_CORR_out1_1 <= GAIN_CORR_out1_signed WHEN enb_1_12_1 = '1' ELSE
      Delay86_bypass_reg;

  yout_signed <= signed(yout);

  Delay49_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay49_out1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Delay49_out1 <= yout_signed;
      END IF;
    END IF;
  END PROCESS Delay49_process;


  Delay49_out1_1 <= std_logic_vector(Delay49_out1);

  GAIN_CORR1_out1_signed <= signed(GAIN_CORR1_out1);

  Delay42_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay42_bypass_reg <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_1 = '1' THEN
        Delay42_bypass_reg <= GAIN_CORR1_out1_signed;
      END IF;
    END IF;
  END PROCESS Delay42_bypass_process;

  
  GAIN_CORR1_out1_1 <= GAIN_CORR1_out1_signed WHEN enb_1_12_1 = '1' ELSE
      Delay42_bypass_reg;

  delayMatch35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Real_Imag_to_Complex_out1_re <= to_signed(16#00000#, 18);
      Real_Imag_to_Complex_out1_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Real_Imag_to_Complex_out1_re <= GAIN_CORR_out1_1;
        Real_Imag_to_Complex_out1_im <= GAIN_CORR1_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch35_process;


  DataOutRotate_re <= std_logic_vector(Real_Imag_to_Complex_out1_re);

  DataOutRotate_im <= std_logic_vector(Real_Imag_to_Complex_out1_im);

  Delay50_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay50_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Delay50_reg(0) <= dataValidIn;
        Delay50_reg(1 TO 13) <= Delay50_reg(0 TO 12);
      END IF;
    END IF;
  END PROCESS Delay50_process;

  Delay50_out1 <= Delay50_reg(13);

  dataValidOut <= Delay50_out1;

END rtl;

