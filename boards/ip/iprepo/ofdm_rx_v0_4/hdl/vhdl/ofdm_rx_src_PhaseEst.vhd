-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\OFDM_Rx_HW\ofdm_rx_src_PhaseEst.vhd
-- Created: 2022-03-24 22:06:16
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ofdm_rx_src_PhaseEst
-- Source Path: OFDM_Rx_HW/OFDMRx/PhaseTracking_2/PhaseEst
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ofdm_rx_src_OFDMRx_pkg.ALL;

ENTITY ofdm_rx_src_PhaseEst IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_12_1                        :   IN    std_logic;
        enb_1_12_0                        :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        dataIn_im                         :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        PilotIn_re                        :   IN    std_logic_vector(1 DOWNTO 0);  -- sfix2
        PilotIn_im                        :   IN    std_logic_vector(1 DOWNTO 0);  -- sfix2
        pilotEnd                          :   IN    std_logic;
        dataValid                         :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        dataOut_im                        :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        phaseOut                          :   OUT   std_logic_vector(22 DOWNTO 0);  -- sfix23_En20
        validOut                          :   OUT   std_logic
        );
END ofdm_rx_src_PhaseEst;


ARCHITECTURE rtl OF ofdm_rx_src_PhaseEst IS

  -- Component Declarations
  COMPONENT ofdm_rx_src_CIC_MA
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_12_0                      :   IN    std_logic;
          In1_re                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          In1_im                          :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
          Out1_re                         :   OUT   std_logic_vector(22 DOWNTO 0);  -- sfix23_En15
          Out1_im                         :   OUT   std_logic_vector(22 DOWNTO 0)  -- sfix23_En15
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_Quadrant_Mapper_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_12_0                      :   IN    std_logic;
          xin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          yin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          xout                            :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          yout                            :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          QA_Control                      :   OUT   std_logic_vector(2 DOWNTO 0)  -- ufix3
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_CordicKernelMag_block9
    PORT( xin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          yin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          yout                            :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_CordicKernelMag_block10
    PORT( xin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          yin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          yout                            :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_CordicKernelMag_block11
    PORT( xin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          yin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          yout                            :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_CordicKernelMag_block12
    PORT( xin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          yin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          yout                            :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_CordicKernelMag_block13
    PORT( xin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          yin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          yout                            :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_CordicKernelMag_block14
    PORT( xin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          yin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          yout                            :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_CordicKernelMag_block15
    PORT( xin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          yin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          yout                            :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_CordicKernelMag_block16
    PORT( xin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          yin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          yout                            :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_CordicKernelMag_block17
    PORT( xin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          yin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          yout                            :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_CordicKernelMag_block18
    PORT( xin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          yin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(17 DOWNTO 0);  -- ufix18_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          yout                            :   OUT   std_logic_vector(18 DOWNTO 0);  -- sfix19_En15
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT ofdm_rx_src_Quadrant_Correction_block
    PORT( zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          QA_Control                      :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          zout                            :   OUT   std_logic_vector(20 DOWNTO 0)  -- sfix21_En18
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ofdm_rx_src_CIC_MA
    USE ENTITY work.ofdm_rx_src_CIC_MA(rtl);

  FOR ALL : ofdm_rx_src_Quadrant_Mapper_block
    USE ENTITY work.ofdm_rx_src_Quadrant_Mapper_block(rtl);

  FOR ALL : ofdm_rx_src_CordicKernelMag_block9
    USE ENTITY work.ofdm_rx_src_CordicKernelMag_block9(rtl);

  FOR ALL : ofdm_rx_src_CordicKernelMag_block10
    USE ENTITY work.ofdm_rx_src_CordicKernelMag_block10(rtl);

  FOR ALL : ofdm_rx_src_CordicKernelMag_block11
    USE ENTITY work.ofdm_rx_src_CordicKernelMag_block11(rtl);

  FOR ALL : ofdm_rx_src_CordicKernelMag_block12
    USE ENTITY work.ofdm_rx_src_CordicKernelMag_block12(rtl);

  FOR ALL : ofdm_rx_src_CordicKernelMag_block13
    USE ENTITY work.ofdm_rx_src_CordicKernelMag_block13(rtl);

  FOR ALL : ofdm_rx_src_CordicKernelMag_block14
    USE ENTITY work.ofdm_rx_src_CordicKernelMag_block14(rtl);

  FOR ALL : ofdm_rx_src_CordicKernelMag_block15
    USE ENTITY work.ofdm_rx_src_CordicKernelMag_block15(rtl);

  FOR ALL : ofdm_rx_src_CordicKernelMag_block16
    USE ENTITY work.ofdm_rx_src_CordicKernelMag_block16(rtl);

  FOR ALL : ofdm_rx_src_CordicKernelMag_block17
    USE ENTITY work.ofdm_rx_src_CordicKernelMag_block17(rtl);

  FOR ALL : ofdm_rx_src_CordicKernelMag_block18
    USE ENTITY work.ofdm_rx_src_CordicKernelMag_block18(rtl);

  FOR ALL : ofdm_rx_src_Quadrant_Correction_block
    USE ENTITY work.ofdm_rx_src_Quadrant_Correction_block(rtl);

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL dataIn_im_signed                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay7_reg_re                    : vector_of_signed18(0 TO 15);  -- sfix18_En15 [16]
  SIGNAL Delay7_reg_im                    : vector_of_signed18(0 TO 15);  -- sfix18_En15 [16]
  SIGNAL Delay7_out1_re                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay7_out1_im                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL kconst                           : signed(22 DOWNTO 0);  -- sfix23_En22
  SIGNAL kconst_1                         : signed(22 DOWNTO 0);  -- sfix23_En22
  SIGNAL delayMatch35_reg                 : std_logic_vector(0 TO 14);  -- ufix1 [15]
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 12);  -- ufix1 [13]
  SIGNAL Constant_out1_1                  : std_logic;
  SIGNAL Constant_out1_2                  : std_logic;
  SIGNAL Delay2_out1_re                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay2_out1_im                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL PilotIn_re_signed                : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL PilotIn_im_signed                : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL PilotIn_re_1                     : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL PilotIn_im_1                     : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL Delay3_out1_re                   : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL Delay3_out1_im                   : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL Product_mul_temp                 : signed(19 DOWNTO 0);  -- sfix20_En15
  SIGNAL Product_Re_AC                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product_Re_AC_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product2_mul_temp                : signed(19 DOWNTO 0);  -- sfix20_En15
  SIGNAL Product_Re_BD                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product1_mul_temp                : signed(19 DOWNTO 0);  -- sfix20_En15
  SIGNAL Product_Im_AD                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product_Im_AD_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product3_mul_temp                : signed(19 DOWNTO 0);  -- sfix20_En15
  SIGNAL Product_Im_BC                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product_Re_BD_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL mulOutput                        : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product_Im_BC_1                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL mulOutput_1                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay5_bypass_reg_re             : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay5_bypass_reg_im             : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product_out1_re                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product_out1_im                  : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL CIC_MA_out1_re                   : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL CIC_MA_out1_im                   : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL CIC_MA_out1_re_signed            : signed(22 DOWNTO 0);  -- sfix23_En15
  SIGNAL CIC_MA_out1_im_signed            : signed(22 DOWNTO 0);  -- sfix23_En15
  SIGNAL Gain_cast                        : signed(45 DOWNTO 0);  -- sfix46_En38
  SIGNAL Gain_cast_1                      : signed(45 DOWNTO 0);  -- sfix46_En38
  SIGNAL Gain_out1_re                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Gain_out1_im                     : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL qMapReal                         : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL qMapImag                         : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL qMapReal_1                       : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL qMapImag_1                       : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL XQMapped                         : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL yQMapped                         : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL ControlQC                        : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL XQMapped_signed                  : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL yQMapped_signed                  : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL xin1                             : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL yin1                             : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL zin1                             : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL lut_value1                       : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL shift1                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout1                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL yout1                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL zout1                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL xout1_signed                     : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL yout1_signed                     : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL zout1_signed                     : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL xout1_1                          : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL yout1_1                          : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL zout1_1                          : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL lut_value2                       : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL shift2                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout2                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL yout2                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL zout2                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL xout2_signed                     : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL yout2_signed                     : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL zout2_signed                     : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL xout2_1                          : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL yout2_1                          : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL zout2_1                          : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL lut_value3                       : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL shift3                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout3                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL yout3                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL zout3                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL xout3_signed                     : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL yout3_signed                     : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL zout3_signed                     : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL xout3_1                          : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL yout3_1                          : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL zout3_1                          : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL lut_value4                       : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL shift4                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout4                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL yout4                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL zout4                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL xout4_signed                     : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL yout4_signed                     : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL zout4_signed                     : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL xout4_1                          : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL yout4_1                          : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL zout4_1                          : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL lut_value5                       : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL shift5                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout5                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL yout5                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL zout5                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL xout5_signed                     : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL yout5_signed                     : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL zout5_signed                     : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL xout5_1                          : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL yout5_1                          : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL zout5_1                          : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL lut_value6                       : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL shift6                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout6                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL yout6                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL zout6                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL xout6_signed                     : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL yout6_signed                     : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL zout6_signed                     : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL xout6_1                          : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL yout6_1                          : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL zout6_1                          : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL lut_value7                       : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL shift7                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout7                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL yout7                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL zout7                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL xout7_signed                     : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL yout7_signed                     : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL zout7_signed                     : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL xout7_1                          : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL yout7_1                          : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL zout7_1                          : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL lut_value8                       : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL shift8                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout8                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL yout8                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL zout8                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL xout8_signed                     : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL yout8_signed                     : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL zout8_signed                     : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL xout8_1                          : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL yout8_1                          : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL zout8_1                          : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL lut_value9                       : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL shift9                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout9                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL yout9                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL zout9                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL xout9_signed                     : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL yout9_signed                     : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL zout9_signed                     : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL xout9_1                          : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL yout9_1                          : signed(18 DOWNTO 0);  -- sfix19_En15
  SIGNAL zout9_1                          : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL lut_value10                      : unsigned(17 DOWNTO 0);  -- ufix18_En18
  SIGNAL shift10                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout10                           : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL yout10                           : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL zout10                           : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL zout10_signed                    : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL ControlQC_unsigned               : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL reduced_reg                      : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Constant_out1_3                  : std_logic;
  SIGNAL reset_1                          : std_logic;
  SIGNAL zout10_1                         : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL DelayQC_Control_reg              : vector_of_unsigned3(0 TO 10);  -- ufix3 [11]
  SIGNAL ControlQCDelay                   : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL zout_corrected                   : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL zout_corrected_signed            : signed(20 DOWNTO 0);  -- sfix21_En18
  SIGNAL zeroCA                           : signed(20 DOWNTO 0);  -- sfix21_En18
  SIGNAL outSwitchAng                     : signed(20 DOWNTO 0);  -- sfix21_En18
  SIGNAL outSwitchAng_1                   : signed(20 DOWNTO 0);  -- sfix21_En18
  SIGNAL Data_Type_Conversion_out1        : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Unit_Delay_Enabled_Synchronous_ectrl : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Unit_Delay_Enabled_Synchronous_ectrl_1 : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Unit_Delay_Enabled_Synchronous_ectrl_2 : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Unit_Delay_Enabled_Synchronous_ectrl_3 : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Gain1_mul_temp                   : signed(45 DOWNTO 0);  -- sfix46_En42
  SIGNAL Gain1_out1                       : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Gain1_out1_1                     : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Delay1_bypass_reg                : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL Gain1_out1_2                     : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL Delay8_reg                       : std_logic_vector(0 TO 14);  -- ufix1 [15]
  SIGNAL Delay8_out1                      : std_logic;

BEGIN
  u_CIC_MA : ofdm_rx_src_CIC_MA
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_12_0 => enb_1_12_0,
              In1_re => std_logic_vector(Product_out1_re),  -- sfix18_En15
              In1_im => std_logic_vector(Product_out1_im),  -- sfix18_En15
              Out1_re => CIC_MA_out1_re,  -- sfix23_En15
              Out1_im => CIC_MA_out1_im  -- sfix23_En15
              );

  u_QuadrantMapper : ofdm_rx_src_Quadrant_Mapper_block
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_12_0 => enb_1_12_0,
              xin => std_logic_vector(qMapReal_1),  -- sfix19_En15
              yin => std_logic_vector(qMapImag_1),  -- sfix19_En15
              xout => XQMapped,  -- sfix19_En15
              yout => yQMapped,  -- sfix19_En15
              QA_Control => ControlQC  -- ufix3
              );

  u_Iteration : ofdm_rx_src_CordicKernelMag_block9
    PORT MAP( xin => std_logic_vector(xin1),  -- sfix19_En15
              yin => std_logic_vector(yin1),  -- sfix19_En15
              zin => std_logic_vector(zin1),  -- sfix19_En18
              lut_value => std_logic_vector(lut_value1),  -- ufix18_En18
              idx => std_logic_vector(shift1),  -- ufix5
              xout => xout1,  -- sfix19_En15
              yout => yout1,  -- sfix19_En15
              zout => zout1  -- sfix19_En18
              );

  u_Iteration1 : ofdm_rx_src_CordicKernelMag_block10
    PORT MAP( xin => std_logic_vector(xout1_1),  -- sfix19_En15
              yin => std_logic_vector(yout1_1),  -- sfix19_En15
              zin => std_logic_vector(zout1_1),  -- sfix19_En18
              lut_value => std_logic_vector(lut_value2),  -- ufix18_En18
              idx => std_logic_vector(shift2),  -- ufix5
              xout => xout2,  -- sfix19_En15
              yout => yout2,  -- sfix19_En15
              zout => zout2  -- sfix19_En18
              );

  u_Iteration2 : ofdm_rx_src_CordicKernelMag_block11
    PORT MAP( xin => std_logic_vector(xout2_1),  -- sfix19_En15
              yin => std_logic_vector(yout2_1),  -- sfix19_En15
              zin => std_logic_vector(zout2_1),  -- sfix19_En18
              lut_value => std_logic_vector(lut_value3),  -- ufix18_En18
              idx => std_logic_vector(shift3),  -- ufix5
              xout => xout3,  -- sfix19_En15
              yout => yout3,  -- sfix19_En15
              zout => zout3  -- sfix19_En18
              );

  u_Iteration3 : ofdm_rx_src_CordicKernelMag_block12
    PORT MAP( xin => std_logic_vector(xout3_1),  -- sfix19_En15
              yin => std_logic_vector(yout3_1),  -- sfix19_En15
              zin => std_logic_vector(zout3_1),  -- sfix19_En18
              lut_value => std_logic_vector(lut_value4),  -- ufix18_En18
              idx => std_logic_vector(shift4),  -- ufix5
              xout => xout4,  -- sfix19_En15
              yout => yout4,  -- sfix19_En15
              zout => zout4  -- sfix19_En18
              );

  u_Iteration4 : ofdm_rx_src_CordicKernelMag_block13
    PORT MAP( xin => std_logic_vector(xout4_1),  -- sfix19_En15
              yin => std_logic_vector(yout4_1),  -- sfix19_En15
              zin => std_logic_vector(zout4_1),  -- sfix19_En18
              lut_value => std_logic_vector(lut_value5),  -- ufix18_En18
              idx => std_logic_vector(shift5),  -- ufix5
              xout => xout5,  -- sfix19_En15
              yout => yout5,  -- sfix19_En15
              zout => zout5  -- sfix19_En18
              );

  u_Iteration5 : ofdm_rx_src_CordicKernelMag_block14
    PORT MAP( xin => std_logic_vector(xout5_1),  -- sfix19_En15
              yin => std_logic_vector(yout5_1),  -- sfix19_En15
              zin => std_logic_vector(zout5_1),  -- sfix19_En18
              lut_value => std_logic_vector(lut_value6),  -- ufix18_En18
              idx => std_logic_vector(shift6),  -- ufix5
              xout => xout6,  -- sfix19_En15
              yout => yout6,  -- sfix19_En15
              zout => zout6  -- sfix19_En18
              );

  u_Iteration6 : ofdm_rx_src_CordicKernelMag_block15
    PORT MAP( xin => std_logic_vector(xout6_1),  -- sfix19_En15
              yin => std_logic_vector(yout6_1),  -- sfix19_En15
              zin => std_logic_vector(zout6_1),  -- sfix19_En18
              lut_value => std_logic_vector(lut_value7),  -- ufix18_En18
              idx => std_logic_vector(shift7),  -- ufix5
              xout => xout7,  -- sfix19_En15
              yout => yout7,  -- sfix19_En15
              zout => zout7  -- sfix19_En18
              );

  u_Iteration7 : ofdm_rx_src_CordicKernelMag_block16
    PORT MAP( xin => std_logic_vector(xout7_1),  -- sfix19_En15
              yin => std_logic_vector(yout7_1),  -- sfix19_En15
              zin => std_logic_vector(zout7_1),  -- sfix19_En18
              lut_value => std_logic_vector(lut_value8),  -- ufix18_En18
              idx => std_logic_vector(shift8),  -- ufix5
              xout => xout8,  -- sfix19_En15
              yout => yout8,  -- sfix19_En15
              zout => zout8  -- sfix19_En18
              );

  u_Iteration8 : ofdm_rx_src_CordicKernelMag_block17
    PORT MAP( xin => std_logic_vector(xout8_1),  -- sfix19_En15
              yin => std_logic_vector(yout8_1),  -- sfix19_En15
              zin => std_logic_vector(zout8_1),  -- sfix19_En18
              lut_value => std_logic_vector(lut_value9),  -- ufix18_En18
              idx => std_logic_vector(shift9),  -- ufix5
              xout => xout9,  -- sfix19_En15
              yout => yout9,  -- sfix19_En15
              zout => zout9  -- sfix19_En18
              );

  u_Iteration9 : ofdm_rx_src_CordicKernelMag_block18
    PORT MAP( xin => std_logic_vector(xout9_1),  -- sfix19_En15
              yin => std_logic_vector(yout9_1),  -- sfix19_En15
              zin => std_logic_vector(zout9_1),  -- sfix19_En18
              lut_value => std_logic_vector(lut_value10),  -- ufix18_En18
              idx => std_logic_vector(shift10),  -- ufix5
              xout => xout10,  -- sfix19_En15
              yout => yout10,  -- sfix19_En15
              zout => zout10  -- sfix19_En18
              );

  u_QuadrantCorrection : ofdm_rx_src_Quadrant_Correction_block
    PORT MAP( zin => std_logic_vector(zout10_1),  -- sfix19_En18
              QA_Control => std_logic_vector(ControlQCDelay),  -- ufix3
              zout => zout_corrected  -- sfix21_En18
              );

  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      Delay7_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Delay7_reg_im(0) <= dataIn_im_signed;
        Delay7_reg_im(1 TO 15) <= Delay7_reg_im(0 TO 14);
        Delay7_reg_re(0) <= dataIn_re_signed;
        Delay7_reg_re(1 TO 15) <= Delay7_reg_re(0 TO 14);
      END IF;
    END IF;
  END PROCESS Delay7_process;

  Delay7_out1_re <= Delay7_reg_re(15);
  Delay7_out1_im <= Delay7_reg_im(15);

  dataOut_re <= std_logic_vector(Delay7_out1_re);

  dataOut_im <= std_logic_vector(Delay7_out1_im);

  kconst <= to_signed(-16#400000#, 23);

  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_1 <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_1 <= kconst;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  delayMatch35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch35_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        delayMatch35_reg(0) <= pilotEnd;
        delayMatch35_reg(1 TO 14) <= delayMatch35_reg(0 TO 13);
      END IF;
    END IF;
  END PROCESS delayMatch35_process;

  Delay_out1 <= delayMatch35_reg(14);

  Constant_out1 <= '1';

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        delayMatch_reg(0) <= Constant_out1;
        delayMatch_reg(1 TO 12) <= delayMatch_reg(0 TO 11);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Constant_out1_1 <= delayMatch_reg(12);

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Constant_out1_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Constant_out1_2 <= Constant_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  Delay2_out1_re <= signed(dataIn_re);

  PilotIn_re_signed <= signed(PilotIn_re);

  PilotIn_im_signed <= signed(PilotIn_im);

  delayMatch33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      PilotIn_re_1 <= to_signed(16#0#, 2);
      PilotIn_im_1 <= to_signed(16#0#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        PilotIn_re_1 <= PilotIn_re_signed;
        PilotIn_im_1 <= PilotIn_im_signed;
      END IF;
    END IF;
  END PROCESS delayMatch33_process;


  Delay3_out1_re <= PilotIn_re_1;

  Product_mul_temp <= Delay2_out1_re * Delay3_out1_re;
  Product_Re_AC <= Product_mul_temp(17 DOWNTO 0);

  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_Re_AC_1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product_Re_AC_1 <= Product_Re_AC;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Delay2_out1_im <= signed(dataIn_im);

  Delay3_out1_im <= PilotIn_im_1;

  Product2_mul_temp <= Delay2_out1_im * Delay3_out1_im;
  Product_Re_BD <= Product2_mul_temp(17 DOWNTO 0);

  Product1_mul_temp <= Delay2_out1_re * Delay3_out1_im;
  Product_Im_AD <= Product1_mul_temp(17 DOWNTO 0);

  PipelineRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_Im_AD_1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product_Im_AD_1 <= Product_Im_AD;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  Product3_mul_temp <= Delay2_out1_im * Delay3_out1_re;
  Product_Im_BC <= Product3_mul_temp(17 DOWNTO 0);

  PipelineRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_Re_BD_1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product_Re_BD_1 <= Product_Re_BD;
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;


  mulOutput <= Product_Re_AC_1 - Product_Re_BD_1;

  PipelineRegister3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product_Im_BC_1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product_Im_BC_1 <= Product_Im_BC;
      END IF;
    END IF;
  END PROCESS PipelineRegister3_process;


  mulOutput_1 <= Product_Im_AD_1 + Product_Im_BC_1;

  Delay5_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_bypass_reg_re <= to_signed(16#00000#, 18);
      Delay5_bypass_reg_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_1 = '1' THEN
        Delay5_bypass_reg_im <= mulOutput_1;
        Delay5_bypass_reg_re <= mulOutput;
      END IF;
    END IF;
  END PROCESS Delay5_bypass_process;

  
  Product_out1_re <= mulOutput WHEN enb_1_12_1 = '1' ELSE
      Delay5_bypass_reg_re;
  
  Product_out1_im <= mulOutput_1 WHEN enb_1_12_1 = '1' ELSE
      Delay5_bypass_reg_im;

  CIC_MA_out1_re_signed <= signed(CIC_MA_out1_re);

  CIC_MA_out1_im_signed <= signed(CIC_MA_out1_im);

  -- Complex to Magnitude-Angle HDL Optimized
  Gain_cast <= resize(CIC_MA_out1_re_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 46);
  Gain_out1_re <= Gain_cast(40 DOWNTO 23);
  Gain_cast_1 <= resize(CIC_MA_out1_im_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 46);
  Gain_out1_im <= Gain_cast_1(40 DOWNTO 23);

  qMapReal <= resize(Gain_out1_re, 19);

  qMapImag <= resize(Gain_out1_im, 19);

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qMapReal_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        qMapReal_1 <= qMapReal;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qMapImag_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        qMapImag_1 <= qMapImag;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  XQMapped_signed <= signed(XQMapped);

  yQMapped_signed <= signed(yQMapped);

  DelayQuadMapper1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xin1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        xin1 <= XQMapped_signed;
      END IF;
    END IF;
  END PROCESS DelayQuadMapper1_process;


  DelayQuadMapper2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yin1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        yin1 <= yQMapped_signed;
      END IF;
    END IF;
  END PROCESS DelayQuadMapper2_process;


  zin1 <= to_signed(16#00000#, 19);

  lut_value1 <= to_unsigned(16#1DAC6#, 18);

  shift1 <= to_unsigned(16#01#, 5);

  xout1_signed <= signed(xout1);

  yout1_signed <= signed(yout1);

  zout1_signed <= signed(zout1);

  delayMatch3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xout1_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        xout1_1 <= xout1_signed;
      END IF;
    END IF;
  END PROCESS delayMatch3_process;


  delayMatch4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yout1_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        yout1_1 <= yout1_signed;
      END IF;
    END IF;
  END PROCESS delayMatch4_process;


  delayMatch5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      zout1_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        zout1_1 <= zout1_signed;
      END IF;
    END IF;
  END PROCESS delayMatch5_process;


  lut_value2 <= to_unsigned(16#0FADC#, 18);

  shift2 <= to_unsigned(16#02#, 5);

  xout2_signed <= signed(xout2);

  yout2_signed <= signed(yout2);

  zout2_signed <= signed(zout2);

  delayMatch6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xout2_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        xout2_1 <= xout2_signed;
      END IF;
    END IF;
  END PROCESS delayMatch6_process;


  delayMatch7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yout2_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        yout2_1 <= yout2_signed;
      END IF;
    END IF;
  END PROCESS delayMatch7_process;


  delayMatch8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      zout2_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        zout2_1 <= zout2_signed;
      END IF;
    END IF;
  END PROCESS delayMatch8_process;


  lut_value3 <= to_unsigned(16#07F57#, 18);

  shift3 <= to_unsigned(16#03#, 5);

  xout3_signed <= signed(xout3);

  yout3_signed <= signed(yout3);

  zout3_signed <= signed(zout3);

  delayMatch9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xout3_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        xout3_1 <= xout3_signed;
      END IF;
    END IF;
  END PROCESS delayMatch9_process;


  delayMatch10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yout3_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        yout3_1 <= yout3_signed;
      END IF;
    END IF;
  END PROCESS delayMatch10_process;


  delayMatch11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      zout3_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        zout3_1 <= zout3_signed;
      END IF;
    END IF;
  END PROCESS delayMatch11_process;


  lut_value4 <= to_unsigned(16#03FEB#, 18);

  shift4 <= to_unsigned(16#04#, 5);

  xout4_signed <= signed(xout4);

  yout4_signed <= signed(yout4);

  zout4_signed <= signed(zout4);

  delayMatch12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xout4_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        xout4_1 <= xout4_signed;
      END IF;
    END IF;
  END PROCESS delayMatch12_process;


  delayMatch13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yout4_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        yout4_1 <= yout4_signed;
      END IF;
    END IF;
  END PROCESS delayMatch13_process;


  delayMatch14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      zout4_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        zout4_1 <= zout4_signed;
      END IF;
    END IF;
  END PROCESS delayMatch14_process;


  lut_value5 <= to_unsigned(16#01FFD#, 18);

  shift5 <= to_unsigned(16#05#, 5);

  xout5_signed <= signed(xout5);

  yout5_signed <= signed(yout5);

  zout5_signed <= signed(zout5);

  delayMatch15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xout5_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        xout5_1 <= xout5_signed;
      END IF;
    END IF;
  END PROCESS delayMatch15_process;


  delayMatch16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yout5_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        yout5_1 <= yout5_signed;
      END IF;
    END IF;
  END PROCESS delayMatch16_process;


  delayMatch17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      zout5_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        zout5_1 <= zout5_signed;
      END IF;
    END IF;
  END PROCESS delayMatch17_process;


  lut_value6 <= to_unsigned(16#01000#, 18);

  shift6 <= to_unsigned(16#06#, 5);

  xout6_signed <= signed(xout6);

  yout6_signed <= signed(yout6);

  zout6_signed <= signed(zout6);

  delayMatch18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xout6_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        xout6_1 <= xout6_signed;
      END IF;
    END IF;
  END PROCESS delayMatch18_process;


  delayMatch19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yout6_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        yout6_1 <= yout6_signed;
      END IF;
    END IF;
  END PROCESS delayMatch19_process;


  delayMatch20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      zout6_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        zout6_1 <= zout6_signed;
      END IF;
    END IF;
  END PROCESS delayMatch20_process;


  lut_value7 <= to_unsigned(16#00800#, 18);

  shift7 <= to_unsigned(16#07#, 5);

  xout7_signed <= signed(xout7);

  yout7_signed <= signed(yout7);

  zout7_signed <= signed(zout7);

  delayMatch21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xout7_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        xout7_1 <= xout7_signed;
      END IF;
    END IF;
  END PROCESS delayMatch21_process;


  delayMatch22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yout7_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        yout7_1 <= yout7_signed;
      END IF;
    END IF;
  END PROCESS delayMatch22_process;


  delayMatch23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      zout7_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        zout7_1 <= zout7_signed;
      END IF;
    END IF;
  END PROCESS delayMatch23_process;


  lut_value8 <= to_unsigned(16#00400#, 18);

  shift8 <= to_unsigned(16#08#, 5);

  xout8_signed <= signed(xout8);

  yout8_signed <= signed(yout8);

  zout8_signed <= signed(zout8);

  delayMatch24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xout8_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        xout8_1 <= xout8_signed;
      END IF;
    END IF;
  END PROCESS delayMatch24_process;


  delayMatch25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yout8_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        yout8_1 <= yout8_signed;
      END IF;
    END IF;
  END PROCESS delayMatch25_process;


  delayMatch26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      zout8_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        zout8_1 <= zout8_signed;
      END IF;
    END IF;
  END PROCESS delayMatch26_process;


  lut_value9 <= to_unsigned(16#00200#, 18);

  shift9 <= to_unsigned(16#09#, 5);

  xout9_signed <= signed(xout9);

  yout9_signed <= signed(yout9);

  zout9_signed <= signed(zout9);

  delayMatch27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xout9_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        xout9_1 <= xout9_signed;
      END IF;
    END IF;
  END PROCESS delayMatch27_process;


  delayMatch28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yout9_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        yout9_1 <= yout9_signed;
      END IF;
    END IF;
  END PROCESS delayMatch28_process;


  delayMatch29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      zout9_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        zout9_1 <= zout9_signed;
      END IF;
    END IF;
  END PROCESS delayMatch29_process;


  lut_value10 <= to_unsigned(16#00100#, 18);

  shift10 <= to_unsigned(16#0A#, 5);

  zout10_signed <= signed(zout10);

  ControlQC_unsigned <= unsigned(ControlQC);

  reduced_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        reduced_reg(0) <= Constant_out1_2;
        reduced_reg(1 TO 3) <= reduced_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  Constant_out1_3 <= reduced_reg(3);

  reset_1 <=  NOT Constant_out1_3;

  delayMatch30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      zout10_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        zout10_1 <= zout10_signed;
      END IF;
    END IF;
  END PROCESS delayMatch30_process;


  DelayQC_Control_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      DelayQC_Control_reg <= (OTHERS => to_unsigned(16#0#, 3));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        DelayQC_Control_reg(0) <= ControlQC_unsigned;
        DelayQC_Control_reg(1 TO 10) <= DelayQC_Control_reg(0 TO 9);
      END IF;
    END IF;
  END PROCESS DelayQC_Control_process;

  ControlQCDelay <= DelayQC_Control_reg(10);

  zout_corrected_signed <= signed(zout_corrected);

  zeroCA <= to_signed(16#000000#, 21);

  
  outSwitchAng <= zout_corrected_signed WHEN reset_1 = '0' ELSE
      zeroCA;

  delayMatch31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      outSwitchAng_1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        outSwitchAng_1 <= outSwitchAng;
      END IF;
    END IF;
  END PROCESS delayMatch31_process;


  Data_Type_Conversion_out1 <= outSwitchAng_1 & '0' & '0';

  
  Unit_Delay_Enabled_Synchronous_ectrl_1 <= Unit_Delay_Enabled_Synchronous_ectrl WHEN Delay_out1 = '0' ELSE
      Data_Type_Conversion_out1;

  delayMatch32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Synchronous_ectrl <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Unit_Delay_Enabled_Synchronous_ectrl <= Unit_Delay_Enabled_Synchronous_ectrl_1;
      END IF;
    END IF;
  END PROCESS delayMatch32_process;


  Unit_Delay_Enabled_Synchronous_ectrl_2 <= Unit_Delay_Enabled_Synchronous_ectrl;

  HwModeRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_Enabled_Synchronous_ectrl_3 <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay_Enabled_Synchronous_ectrl_3 <= Unit_Delay_Enabled_Synchronous_ectrl_2;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  Gain1_mul_temp <= kconst_1 * Unit_Delay_Enabled_Synchronous_ectrl_3;
  Gain1_out1 <= Gain1_mul_temp(44 DOWNTO 22);

  PipelineRegister4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain1_out1_1 <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain1_out1_1 <= Gain1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister4_process;


  Delay1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_bypass_reg <= to_signed(16#000000#, 23);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_1 = '1' THEN
        Delay1_bypass_reg <= Gain1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay1_bypass_process;

  
  Gain1_out1_2 <= Gain1_out1_1 WHEN enb_1_12_1 = '1' ELSE
      Delay1_bypass_reg;

  phaseOut <= std_logic_vector(Gain1_out1_2);

  Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Delay8_reg(0) <= dataValid;
        Delay8_reg(1 TO 14) <= Delay8_reg(0 TO 13);
      END IF;
    END IF;
  END PROCESS Delay8_process;

  Delay8_out1 <= Delay8_reg(14);

  validOut <= Delay8_out1;

END rtl;

