-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\OFDM_Rx_HW\ofdm_rx_src_CIC_ma_block.vhd
-- Created: 2022-03-24 22:06:16
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ofdm_rx_src_CIC_ma_block
-- Source Path: OFDM_Rx_HW/OFDMRx/Synchronisation/SchmidlCoxMetric /CIC_ma
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ofdm_rx_src_OFDMRx_pkg.ALL;

ENTITY ofdm_rx_src_CIC_ma_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_12_0                        :   IN    std_logic;
        In1_re                            :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En23
        In1_im                            :   IN    std_logic_vector(24 DOWNTO 0);  -- sfix25_En23
        Out1_re                           :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En16
        Out1_im                           :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En16
        );
END ofdm_rx_src_CIC_ma_block;


ARCHITECTURE rtl OF ofdm_rx_src_CIC_ma_block IS

  -- Signals
  SIGNAL In1_re_signed                    : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL In1_im_signed                    : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL Delay3_out1_re                   : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL Delay3_out1_im                   : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL Delay1_reg_re                    : vector_of_signed25(0 TO 47);  -- sfix25_En23 [48]
  SIGNAL Delay1_reg_im                    : vector_of_signed25(0 TO 47);  -- sfix25_En23 [48]
  SIGNAL Delay1_out1_re                   : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL Delay1_out1_im                   : signed(24 DOWNTO 0);  -- sfix25_En23
  SIGNAL Add_sub_cast                     : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Add_sub_cast_1                   : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Add_sub_cast_2                   : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Add_sub_cast_3                   : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Add_out1_re                      : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Add_out1_im                      : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Delay2_out1_re                   : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Delay2_out1_im                   : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Add1_out1_re                     : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Add1_out1_im                     : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Delay4_out1_re                   : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Delay4_out1_im                   : signed(32 DOWNTO 0);  -- sfix33_En23
  SIGNAL Data_Type_Conversion_out1_re     : signed(17 DOWNTO 0);  -- sfix18_En16
  SIGNAL Data_Type_Conversion_out1_im     : signed(17 DOWNTO 0);  -- sfix18_En16

BEGIN
  -- The averaging window is set to 64 samples i.e. 
  -- 4x repetitions of the L-STF. Using a larger averaging 
  -- window improves the coarse CFO estimate. This 
  -- approach leaves 6x L-STF repetitions for AGC convergence.   

  In1_re_signed <= signed(In1_re);

  In1_im_signed <= signed(In1_im);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1_re <= to_signed(16#0000000#, 25);
      Delay3_out1_im <= to_signed(16#0000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Delay3_out1_re <= In1_re_signed;
        Delay3_out1_im <= In1_im_signed;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg_re <= (OTHERS => to_signed(16#0000000#, 25));
      Delay1_reg_im <= (OTHERS => to_signed(16#0000000#, 25));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Delay1_reg_im(0) <= Delay3_out1_im;
        Delay1_reg_im(1 TO 47) <= Delay1_reg_im(0 TO 46);
        Delay1_reg_re(0) <= Delay3_out1_re;
        Delay1_reg_re(1 TO 47) <= Delay1_reg_re(0 TO 46);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1_re <= Delay1_reg_re(47);
  Delay1_out1_im <= Delay1_reg_im(47);

  Add_sub_cast <= resize(Delay3_out1_re, 33);
  Add_sub_cast_1 <= resize(Delay1_out1_re, 33);
  Add_out1_re <= Add_sub_cast - Add_sub_cast_1;
  Add_sub_cast_2 <= resize(Delay3_out1_im, 33);
  Add_sub_cast_3 <= resize(Delay1_out1_im, 33);
  Add_out1_im <= Add_sub_cast_2 - Add_sub_cast_3;

  Add1_out1_re <= Delay2_out1_re + Add_out1_re;
  Add1_out1_im <= Delay2_out1_im + Add_out1_im;

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1_re <= to_signed(0, 33);
      Delay2_out1_im <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Delay2_out1_re <= Add1_out1_re;
        Delay2_out1_im <= Add1_out1_im;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1_re <= to_signed(0, 33);
      Delay4_out1_im <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        Delay4_out1_re <= Delay2_out1_re;
        Delay4_out1_im <= Delay2_out1_im;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Data_Type_Conversion_out1_re <= Delay4_out1_re(24 DOWNTO 7);
  Data_Type_Conversion_out1_im <= Delay4_out1_im(24 DOWNTO 7);

  Out1_re <= std_logic_vector(Data_Type_Conversion_out1_re);

  Out1_im <= std_logic_vector(Data_Type_Conversion_out1_im);

END rtl;

