-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\OFDM_Rx_HW\ofdm_rx_src_Divide.vhd
-- Created: 2022-03-24 22:06:16
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ofdm_rx_src_Divide
-- Source Path: OFDM_Rx_HW/OFDMRx/ChannelEstEq/Equalise/Divide
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ofdm_rx_src_OFDMRx_pkg.ALL;

ENTITY ofdm_rx_src_Divide IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_12_1                        :   IN    std_logic;
        enb_1_12_0                        :   IN    std_logic;
        In1_re                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        In1_im                            :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        In2                               :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En14
        dataOutEq_re                      :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En15
        dataOutEq_im                      :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En15
        );
END ofdm_rx_src_Divide;


ARCHITECTURE rtl OF ofdm_rx_src_Divide IS

  -- Component Declarations
  COMPONENT ofdm_rx_src_Reciprocal
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din                             :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En14
          dout                            :   OUT   std_logic_vector(24 DOWNTO 0)  -- ufix25_En15
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ofdm_rx_src_Reciprocal
    USE ENTITY work.ofdm_rx_src_Reciprocal(rtl);

  -- Signals
  SIGNAL In1_re_signed                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL In1_im_signed                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL delayMatch_reg_re                : vector_of_signed18(0 TO 3);  -- sfix18_En15 [4]
  SIGNAL delayMatch_reg_im                : vector_of_signed18(0 TO 3);  -- sfix18_En15 [4]
  SIGNAL Delay8_out1_re                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay8_out1_im                   : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay8_out1_re_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay8_out1_im_1                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product2_C2ReIm_C2ReIm_A         : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL In2_1                            : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Reciprocal_out1                  : std_logic_vector(24 DOWNTO 0);  -- ufix25
  SIGNAL Reciprocal_out1_unsigned         : unsigned(24 DOWNTO 0);  -- ufix25_En15
  SIGNAL Delay1_bypass_reg                : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL Reciprocal_out1_1                : unsigned(24 DOWNTO 0);  -- ufix25_En15
  SIGNAL Delay1_out1                      : unsigned(24 DOWNTO 0);  -- ufix25_En15
  SIGNAL Delay1_out1_1                    : unsigned(24 DOWNTO 0);  -- ufix25_En15
  SIGNAL Product2_cast                    : signed(25 DOWNTO 0);  -- sfix26_En15
  SIGNAL Product2_mul_temp                : signed(43 DOWNTO 0);  -- sfix44_En30
  SIGNAL Product2_cast_1                  : signed(42 DOWNTO 0);  -- sfix43_En30
  SIGNAL Product2_Re                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product2_Re_1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product2_C2ReIm_C2ReIm_B         : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product21_cast                   : signed(25 DOWNTO 0);  -- sfix26_En15
  SIGNAL Product21_mul_temp               : signed(43 DOWNTO 0);  -- sfix44_En30
  SIGNAL Product21_cast_1                 : signed(42 DOWNTO 0);  -- sfix43_En30
  SIGNAL Product2_Im                      : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product2_Im_1                    : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay2_bypass_reg_re             : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Delay2_bypass_reg_im             : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product2_out1_re                 : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL Product2_out1_im                 : signed(17 DOWNTO 0);  -- sfix18_En15

BEGIN
  u_Reciprocal : ofdm_rx_src_Reciprocal
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              din => In2_1,  -- ufix16_En14
              dout => Reciprocal_out1  -- ufix25_En15
              );

  In1_re_signed <= signed(In1_re);

  In1_im_signed <= signed(In1_im);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_re <= (OTHERS => to_signed(16#00000#, 18));
      delayMatch_reg_im <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_0 = '1' THEN
        delayMatch_reg_im(0) <= In1_im_signed;
        delayMatch_reg_im(1 TO 3) <= delayMatch_reg_im(0 TO 2);
        delayMatch_reg_re(0) <= In1_re_signed;
        delayMatch_reg_re(1 TO 3) <= delayMatch_reg_re(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Delay8_out1_re <= delayMatch_reg_re(3);
  Delay8_out1_im <= delayMatch_reg_im(3);

  Delay8_out1_re_1 <= Delay8_out1_re;

  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product2_C2ReIm_C2ReIm_A <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product2_C2ReIm_C2ReIm_A <= Delay8_out1_re_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  In2_1 <= std_logic_vector(unsigned(In2));

  Reciprocal_out1_unsigned <= unsigned(Reciprocal_out1);

  Delay1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_bypass_reg <= to_unsigned(16#0000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_1 = '1' THEN
        Delay1_bypass_reg <= Reciprocal_out1_unsigned;
      END IF;
    END IF;
  END PROCESS Delay1_bypass_process;

  
  Reciprocal_out1_1 <= Reciprocal_out1_unsigned WHEN enb_1_12_1 = '1' ELSE
      Delay1_bypass_reg;

  Delay1_out1 <= Reciprocal_out1_1;

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1_1 <= to_unsigned(16#0000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1_1 <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  Product2_cast <= signed(resize(Delay1_out1_1, 26));
  Product2_mul_temp <= Product2_C2ReIm_C2ReIm_A * Product2_cast;
  Product2_cast_1 <= Product2_mul_temp(42 DOWNTO 0);
  Product2_Re <= Product2_cast_1(32 DOWNTO 15);

  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product2_Re_1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product2_Re_1 <= Product2_Re;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Delay8_out1_im_1 <= Delay8_out1_im;

  HwModeRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product2_C2ReIm_C2ReIm_B <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product2_C2ReIm_C2ReIm_B <= Delay8_out1_im_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;


  Product21_cast <= signed(resize(Delay1_out1_1, 26));
  Product21_mul_temp <= Product2_C2ReIm_C2ReIm_B * Product21_cast;
  Product21_cast_1 <= Product21_mul_temp(42 DOWNTO 0);
  Product2_Im <= Product21_cast_1(32 DOWNTO 15);

  PipelineRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Product2_Im_1 <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Product2_Im_1 <= Product2_Im;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  Delay2_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_bypass_reg_re <= to_signed(16#00000#, 18);
      Delay2_bypass_reg_im <= to_signed(16#00000#, 18);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_12_1 = '1' THEN
        Delay2_bypass_reg_im <= Product2_Im_1;
        Delay2_bypass_reg_re <= Product2_Re_1;
      END IF;
    END IF;
  END PROCESS Delay2_bypass_process;

  
  Product2_out1_re <= Product2_Re_1 WHEN enb_1_12_1 = '1' ELSE
      Delay2_bypass_reg_re;
  
  Product2_out1_im <= Product2_Im_1 WHEN enb_1_12_1 = '1' ELSE
      Delay2_bypass_reg_im;

  dataOutEq_re <= std_logic_vector(Product2_out1_re);

  dataOutEq_im <= std_logic_vector(Product2_out1_im);

END rtl;

